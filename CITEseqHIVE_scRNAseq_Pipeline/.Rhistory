# The Seurat object "obj" produced by BeeNetPLUS_v2 contains QC metadata based on HTODemux. Cells defined as "Doublet", "Negative", or "LQ" should also be filtered out.
obj <- subset(obj, subset = SampleName != "Doublet" & SampleName != "Negative" & SampleName != "LQ")
# Now apply filters for feature counts and mitochondrial counts
obj <- subset(obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mito < 0.15)
# Assign the Seurat object with a unique name using the associated .Rdata file name
assign(paste0("obj_filtered_", file_name), obj)
}
umi_counts <- GetAssayData(obj_filtered_20240102_10_FullPilot_unfiltered, assay = "RNA")
View(umi_counts)
head(umi_counts)
getwd()
# Fix this to contain only what is necessary
library(SingleCellExperiment)
library(Seurat)
library(SeuratObject)
library(scCustomize)
library(dplyr)
library(clustree)
library(ggpubr)
library(patchwork)
library(magrittr)
library(HGNChelper)
library(openxlsx)
library(multtest)
library(metap)
library(ggplot2)
library(gridExtra)
library(cowplot)
ls()
rm(list=ls())
dir_save <- "output/"
# CHECK THIS CONTAINS ONLY NECESSARY LIBRARIES
library(SingleCellExperiment)
library(Seurat)
library(SeuratObject)
library(scCustomize)
library(tidyr)
library(dplyr)
library(clustree)
library(ggpubr)
library(patchwork)
library(magrittr)
library(HGNChelper)
library(openxlsx)
library(multtest)
library(metap)
library(ggplot2)
library(gridExtra)
library(cowplot)
# Use a loop to load Seurat objects from each BeeNetPLUS_v2 run, visualize raw QC data, filter out low quality cells and merge the filtered data into a new Seurat object.
# Create a list of all files in the "data" subdirectory
directory <- "data"
files <- list.files(directory, full.names = TRUE)
# Filter to keep only the Rdata files
rdata_files <- files[grepl("\\.Rdata$", files)]
# Loop through each Rdata file, load the Seurat object, perform filtering, and merge into a new Seurat object
for (data in rdata_files) {
# Extract the file names without extension
file_name <- tools::file_path_sans_ext(basename(data))
# Load the Seurat object and assign it a unique name using the associated .Rdata file name
load(data)
# Save the metadata for each run to a .csv with the same file name as the original .Rdata file
csv_file <- paste0(file_name, "_metadata.csv")
write.csv(obj@meta.data, file = file.path(dir_save, paste0(csv_file)), row.names = TRUE, quote = FALSE)
# Visualize unfiltered QC metrics
plot1 <- VlnPlot(obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3, pt.size = 0)
plot2 <- ggplot(obj@meta.data, aes(x = nCount_RNA)) +
geom_histogram(bins = 100)
plot3 <- ggplotGrob(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "percent.mito"))
plot4 <- ggplotGrob(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA"))
vln_plots <- paste0(file_name, "_QCplots_vln_unfiltered.pdf")
pdf(paste0(dir_save, vln_plots), height = 5, width = 15)
print(plot1)
dev.off()
qc_plots <- paste0(file_name, "_QCplots_unfiltered.pdf")
pdf(paste0(dir_save, qc_plots), height = 5, width = 15)
grid.arrange(plot2, plot3, plot4,
ncol = 3)
dev.off()
# Filter out cells that have unique feature counts above 2500 or less than 200 and >15% mitochondrial counts
# The Seurat object "obj" produced by BeeNetPLUS_v2 contains QC metadata based on HTODemux. Cells defined as "Doublet", "Negative", or "LQ" should also be filtered out.
obj <- subset(obj, subset = SampleName != "Doublet" & SampleName != "Negative" & SampleName != "LQ")
# Now apply filters for feature counts and mitochondrial counts
obj <- subset(obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mito < 0.15)
# Assign the Seurat object with a unique name using the associated .Rdata file name
assign(paste0("obj_filtered_", file_name), obj)
}
# Get all object names in the environment
all_objects <- ls()
# Filter the object names to keep only those starting with "obj_filtered_"
filtered_objects <- all_objects[grep("^obj_filtered_", all_objects)]
# Create a list containing all Seurat objects
list_seurat <- lapply(filtered_objects, get)
# Merge all filtered Seurat objects
obj <- Merge_Seurat_List(list_seurat = list_seurat)
# Split the MULTI_ID column into HIVE_ID, PID, and STIM columns. Do not remove the MULTI_ID column.
obj@meta.data <- separate(obj@meta.data, MULTI_ID, into = c("HIVE", "PID", "STIM"), sep = "-", remove = FALSE)
# Save filtered Seurat object as new .Rdata file
save(obj, file = "output/FilterMerge_Seurat_obj.Rdata")
write.csv(obj@meta.data, file = file.path(dir_save, "FilterMerge_metadata.csv"), row.names = TRUE, quote = FALSE)
# Visualize the filtered QC metrics
plot1 <- VlnPlot(obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3, pt.size = 0)
plot2 <- ggplot(obj@meta.data, aes(x = nCount_RNA)) +
geom_histogram(bins = 100)
plot3 <- ggplotGrob(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "percent.mito"))
plot4 <- ggplotGrob(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA"))
vln_plots <- paste0("QCplots_vln_FilterMerge.pdf")
pdf(paste0(dir_save, vln_plots), height = 5, width = 15)
print(plot1)
dev.off()
qc_plots <- paste0("QCplots_FilterMerge.pdf")
pdf(paste0(dir_save, qc_plots), height = 5, width = 15)
grid.arrange(plot2, plot3, plot4,
ncol = 3)
dev.off()
# Plot reads per cell for each sample
reads_per_cell <- paste0("QCplots_ReadsPerCell_FilterMerge.pdf")
pdf(paste0(dir_save, reads_per_cell), height = 15, width = 15)
ggplot(obj@meta.data, aes(x = nCount_RNA, fill = SampleName)) +
geom_histogram(bins = 30, alpha = 0.6) +
scale_x_log10() +
theme_minimal() +
labs(title = "Reads Per Cell for Each Sample",
x = "Reads per Cell (log scale)",
y = "Frequency",
fill = "Sample") +
facet_wrap(~SampleName, scales = "free_y")
dev.off()
# Plot reads per cell as smooth density line
plot5 <-
obj[[]] %>%
ggplot(aes(x = nCount_RNA + 1)) +
geom_density(color = "gray80", linetype = 2, linewidth = 1.5) +
geom_density(aes(color = SampleName)) +
scale_x_log10() +
theme_bw()
density_plot <- paste0("QCplots_density_FilterMerge.pdf")
pdf(paste0(dir_save, density_plot), height = 5, width = 15)
plot5
dev.off()
ls()
rm(list=ls())
dir_save <- "output/"
# CHECK THIS CONTAINS ONLY NECESSARY LIBRARIES
library(SingleCellExperiment)
library(Seurat)
library(SeuratObject)
library(dplyr)
library(clustree)
library(ggpubr)
library(patchwork)
library(magrittr)
library(HGNChelper)
library(openxlsx)
library(multtest)
library(metap)
library(ggplot2)
library(cowplot)
load("output/FilterMerge_Seurat_obj.Rdata")
obj
head(obj@meta.data, 5)
metadata <- obj@meta.data
# Consider changing to SCTransform
obj <- NormalizeData(obj, normalization.method = "LogNormalize", scale.factor = 10000)
# Calculate the top 2000 highly variable features
obj <- FindVariableFeatures(obj, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(obj), 10)
# plot variable features and label top 10 variable features
plot1 <- VariableFeaturePlot(obj)
plot2 <-LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
# Use defaults to scale only variable features.
obj <- ScaleData(obj)
# Perform PCA for linear dimensional reduction on scaled data
obj <- RunPCA(obj, features = VariableFeatures(object = obj))
# Examine and visualize PCA results a few different ways
print(obj[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(obj, dims = 1:2, reduction = "pca")
DimPlot(obj, reduction = "pca") + NoLegend()
DimHeatmap(obj, dims = 1, cells = 500, balanced = TRUE)
DimHeatmap(obj, dims = 1:15, cells = 500, balanced = TRUE)
ElbowPlot(obj)
View(metadata)
obj <- FindNeighbors(obj, dims = 1:12, reduction = "pca")
obj <- FindClusters(obj, resolution = 1.2, cluster.name = "unintegrated_clusters")
obj <- RunUMAP(obj, dims = 1:12, reduction = "pca", reduction.name = "umap.unintegrated")
DimPlot(obj, reduction = "umap.unintegrated", group.by = c("group", "seurat_clusters"))
DimPlot(obj, reduction = "umap.unintegrated", group.by = c("STIM", "seurat_clusters"))
DimPlot(obj, reduction = "umap.unintegrated", group.by = c("PID", "seurat_clusters"))
resolution.range <- seq(from =0.2, to = 2, by = 0.2)
obj <- Seurat::FindClusters(object = obj, resolution = resolution.range)
clustree <- clustree(obj, prefix = "RNA_snn_res.")
pdf(paste0(dir_save, "clustree.all.pdf"))
clustree
dev.off()
umap.0.4 <- DimPlot(obj, reduction = 'umap.unintegrated', label = T, group.by = "RNA_snn_res.0.4")
umap.0.6 <- DimPlot(obj, reduction = 'umap.unintegrated', label = T, group.by = "RNA_snn_res.0.6")
umap.0.8 <- DimPlot(obj, reduction = 'umap.unintegrated', label = T, group.by = "RNA_snn_res.0.8")
umap.1 <- DimPlot(obj, reduction = 'umap.unintegrated', label = T, group.by = "RNA_snn_res.1")
umap.1.2 <- DimPlot(obj, reduction = 'umap.unintegrated', label = T, group.by = "RNA_snn_res.1.2")
snn_all <- umap.0.4 + umap.0.6 + umap.0.8 + umap.1 + umap.1.2
pdf(paste0(dir_save, "umap_snn_compare.pdf"), width = 20, height = 20)
snn_all
dev.off()
snn_all
Idents(object = obj) <- "RNA_snn_res.0.6"
# Plot UMAPs
pdf(paste0(dir_save, "umap_res.0.6.pdf"))
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 6)
dev.off()
pdf(paste0(dir_save, "umap_allHIVES_res.0.6.pdf"), height = 6, width = 25)
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 4,
group.by = "sampleType",
split.by = "SampleName",
repel = T)
dev.off()
pdf(paste0(dir_save, "umap_allGroup_res.0.6.pdf"), height = 6, width = 20)
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 4,
group.by = "sampleType",
split.by = "group",
repel = T,
pt.size = 1,
alpha = 0.8,
raster = F)
dev.off()
# Plot UMAPs
pdf(paste0(dir_save, "umap_res.0.6.pdf"))
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 6)
dev.off()
pdf(paste0(dir_save, "umap_allHIVES_res.0.6.pdf"), height = 6, width = 25)
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 4,
group.by = "sampleType",
split.by = "SampleName",
repel = T)
dev.off()
pdf(paste0(dir_save, "umap_allGroup_res.0.6.pdf"), height = 6, width = 20)
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 4,
group.by = "group",
split.by = "STIM",
repel = T,
pt.size = 1,
alpha = 0.8,
raster = F)
dev.off()
# Plot UMAPs
pdf(paste0(dir_save, "umap_res.0.6.pdf"))
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 6)
dev.off()
pdf(paste0(dir_save, "umap_allPID_res.0.6.pdf"), height = 6, width = 25)
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 4,
group.by = "PID",
split.by = "STIM",
repel = T)
dev.off()
pdf(paste0(dir_save, "umap_allGroup_res.0.6.pdf"), height = 6, width = 20)
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 4,
group.by = "group",
split.by = "STIM",
repel = T,
pt.size = 1,
alpha = 0.8,
raster = F)
dev.off()
# Plot UMAPs
pdf(paste0(dir_save, "umap_res.0.6.pdf"))
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 6)
dev.off()
pdf(paste0(dir_save, "umap_allHIVES_res.0.6.pdf"), height = 6, width = 25)
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 4,
group.by = "sampleType",
split.by = "HIVE",
repel = T)
dev.off()
pdf(paste0(dir_save, "umap_allGroup_res.0.6.pdf"), height = 6, width = 20)
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 4,
group.by = "group",
split.by = "STIM",
repel = T,
pt.size = 1,
alpha = 0.8,
raster = F)
dev.off()
# Plot UMAPs
pdf(paste0(dir_save, "umap_res.0.6.pdf"))
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 6)
dev.off()
pdf(paste0(dir_save, "umap_allHIVES_res.0.6.pdf"), height = 6, width = 25)
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 4,
group.by = "group",
split.by = "HIVE",
repel = T)
dev.off()
pdf(paste0(dir_save, "umap_allGroup_res.0.6.pdf"), height = 6, width = 20)
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 4,
group.by = "group",
split.by = "STIM",
repel = T,
pt.size = 1,
alpha = 0.8,
raster = F)
dev.off()
pdf(paste0(dir_save, "umap_allPID_res.0.6.pdf"), height = 6, width = 25)
DimPlot(obj,
reduction = "umap.unintegrated",
label = TRUE,
label.size = 4,
group.by = "group",
split.by = "PID",
repel = T)
dev.off()
obj.markers <- FindAllMarkers(obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
obj.markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1)
write.csv(obj.markers, file = file.path(dir_save, "all_markers_snn0.6.csv"), quote = FALSE)
# Find all markers of cluster 1
cluster1.markers <- FindMarkers(obj, ident.1 = 1)
head(cluster1.markers, n = 10)
# Find all markers of cluster 2
cluster2.markers <- FindMarkers(obj, ident.1 = 2)
head(cluster2.markers, n = 10)
# Find all markers of cluster 5
cluster5.markers <- FindMarkers(obj, ident.1 = 5)
head(cluster5.markers, n = 10)
# Find all markers of cluster 6
cluster6.markers <- FindMarkers(obj, ident.1 = 6)
head(cluster6.markers, n = 10)
# Find all markers of cluster 7
cluster7.markers <- FindMarkers(obj, ident.1 = 7)
head(cluster7.markers, n = 10)
# Find all markers distinguishing cluster 6 from main PBMC clusters
cluster6vPBMC.markers <- FindMarkers(obj, ident.1 = 6, ident.2 = c(0:4, 5, 7))
head(cluster6vPBMC.markers, n = 10)
pdf(paste0(dir_save, "DEG_VlnPlot_RelExp.pdf"), height = 6, width = 24)
VlnPlot(obj,
features = c("IL7R", "FGFBP2", "GNLY", "GZMB", "CCL5", "LRRN3", "CCR7", "MS4A1", "IGHM", "SWAP70", "CD74", "HLA-DRA"),
ncol = 3,
pt.size = 0)
dev.off()
pdf(paste0(dir_save, "DEG_VlnPlot_counts.pdf"), height = 6, width = 24)
VlnPlot(obj,
features = c("IL7R", "FGFBP2", "GNLY", "GZMB", "CCL5", "LRRN3", "CCR7", "MS4A1", "IGHM", "SWAP70", "CD74", "HLA-DRA"),
slot = "counts",
log = TRUE,
ncol = 3,
pt.size = 0)
dev.off()
pdf(paste0(dir_save, "DEG_FeaturePlot.pdf"), height = 40, width = 20)
FeaturePlot(obj,
features = c("IL7R", "FGFBP2", "GNLY", "GZMB", "CCL5", "LRRN3", "CCR7", "MS4A1", "IGHM", "SWAP70", "CD74", "HLA-DRA"),
label = TRUE,
label.size = 4,
split.by = "group",
pt.size = 0)
dev.off()
pdf(paste0(dir_save, "DEG_Heatmap.pdf"), height = 40, width = 20)
obj.markers %>%
group_by(cluster) %>%
top_n(n = 10, wt = avg_log2FC) -> top10
DoHeatmap(obj, features = top10$gene) + NoLegend()
dev.off()
#saveRDS(obj, file = file.path(dir_save, "/obj_final.rds"))
pdf(paste0(dir_save, "DEG_VlnPlot_RelExp.pdf"), height = 6, width = 12)
VlnPlot(obj,
features = c("IL7R", "FGFBP2", "GNLY", "GZMB", "CCL5", "LRRN3", "CCR7", "MS4A1", "IGHM", "SWAP70", "CD74", "HLA-DRA"),
ncol = 3,
pt.size = 0)
dev.off()
pdf(paste0(dir_save, "DEG_VlnPlot_counts.pdf"), height = 6, width = 12)
VlnPlot(obj,
features = c("IL7R", "FGFBP2", "GNLY", "GZMB", "CCL5", "LRRN3", "CCR7", "MS4A1", "IGHM", "SWAP70", "CD74", "HLA-DRA"),
slot = "counts",
log = TRUE,
ncol = 3,
pt.size = 0)
dev.off()
pdf(paste0(dir_save, "DEG_FeaturePlot.pdf"), height = 40, width = 20)
FeaturePlot(obj,
features = c("IL7R", "FGFBP2", "GNLY", "GZMB", "CCL5", "LRRN3", "CCR7", "MS4A1", "IGHM", "SWAP70", "CD74", "HLA-DRA"),
label = TRUE,
label.size = 4,
split.by = "group",
pt.size = 0)
dev.off()
pdf(paste0(dir_save, "DEG_Heatmap.pdf"), height = 40, width = 20)
obj.markers %>%
group_by(cluster) %>%
top_n(n = 10, wt = avg_log2FC) -> top10
DoHeatmap(obj, features = top10$gene) + NoLegend()
dev.off()
#saveRDS(obj, file = file.path(dir_save, "/obj_final.rds"))
pdf(paste0(dir_save, "DEG_VlnPlot_RelExp.pdf"), height = 12, width = 12)
VlnPlot(obj,
features = c("IL7R", "FGFBP2", "GNLY", "GZMB", "CCL5", "LRRN3", "CCR7", "MS4A1", "IGHM", "SWAP70", "CD74", "HLA-DRA"),
ncol = 3,
pt.size = 0)
dev.off()
pdf(paste0(dir_save, "DEG_VlnPlot_counts.pdf"), height = 12, width = 12)
VlnPlot(obj,
features = c("IL7R", "FGFBP2", "GNLY", "GZMB", "CCL5", "LRRN3", "CCR7", "MS4A1", "IGHM", "SWAP70", "CD74", "HLA-DRA"),
slot = "counts",
log = TRUE,
ncol = 3,
pt.size = 0)
dev.off()
pdf(paste0(dir_save, "DEG_Heatmap.pdf"), height = 30, width = 20)
obj.markers %>%
group_by(cluster) %>%
top_n(n = 10, wt = avg_log2FC) -> top10
DoHeatmap(obj, features = top10$gene) + NoLegend()
dev.off()
pdf(paste0(dir_save, "DEG_FeaturePlot.pdf"), height = 60, width = 20)
FeaturePlot(obj,
features = c("IL7R", "FGFBP2", "GNLY", "GZMB", "CCL5", "LRRN3", "CCR7", "MS4A1", "IGHM", "SWAP70", "CD74", "HLA-DRA"),
label = TRUE,
label.size = 4,
split.by = "group",
pt.size = 0)
dev.off()
# Load gene set preparation function
source("https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/gene_sets_prepare.R")
# Load cell type annotation function
source("https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/sctype_score_.R")
# DB file
db_ <- "https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_full.xlsx";
tissue <- "Immune system" # e.g. Immune system, Pancreas, Liver, Eye, Kidney, Brain, Lung, Adrenal, Heart, Intestine, Muscle, Placenta, Spleen, Stomach, Thymus
# prepare gene sets
gs_list <- gene_sets_prepare(db_, tissue)
# check Seurat object version (scRNA-seq matrix extracted differently in Seurat v4/v5)
seurat_package_v5 <- isFALSE('counts' %in% names(attributes(obj[["RNA"]])));
print(sprintf("Seurat object %s is used", ifelse(seurat_package_v5, "v5", "v4")))
# extract scaled scRNA-seq matrix
scRNAseqData_scaled <- if (seurat_package_v5) as.matrix(obj[["RNA"]]$scale.data) else as.matrix(obj[["RNA"]]@scale.data)
# run ScType
es.max <- sctype_score(scRNAseqData = scRNAseqData_scaled, scaled = TRUE, gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
# merge by cluster
cL_resutls <- do.call("rbind", lapply(unique(obj@meta.data$seurat_clusters), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(obj@meta.data[obj@meta.data$seurat_clusters==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(obj@meta.data$seurat_clusters==cl)), 10)
}))
sctype_scores <- cL_resutls %>% group_by(cluster) %>% top_n(n = 1, wt = scores)
# set low-confident (low ScType score) clusters to "unknown"
sctype_scores$type[as.numeric(as.character(sctype_scores$scores)) < sctype_scores$ncells/4] <- "Unknown"
print(sctype_scores[,1:3])
obj@meta.data$sctype_classification = ""
for(j in unique(sctype_scores$cluster)){
cl_type = sctype_scores[sctype_scores$cluster==j,];
obj@meta.data$sctype_classification[obj@meta.data$seurat_clusters == j] = as.character(cl_type$type[1])
}
pdf(paste0(dir_save, "umap_annotated.pdf"), height = 7, width = 7)
DimPlot(obj, reduction = "umap.unintegrated", label = TRUE, repel = TRUE, group.by = 'sctype_classification')
dev.off()
pdf(paste0(dir_save, "umap_annotated_splitgroup.pdf"), height = 7, width = 15)
DimPlot(obj, reduction = "umap.unintegrated", split.by = "group", group.by = 'sctype_classification')
dev.off()
obj@meta.data$sctype_classification = ""
for(j in unique(sctype_scores$cluster)){
cl_type = sctype_scores[sctype_scores$cluster==j,];
obj@meta.data$sctype_classification[obj@meta.data$seurat_clusters == j] = as.character(cl_type$type[1])
}
pdf(paste0(dir_save, "umap_annotated.pdf"), height = 7, width = 10)
DimPlot(obj, reduction = "umap.unintegrated", label = TRUE, repel = TRUE, group.by = 'sctype_classification')
dev.off()
pdf(paste0(dir_save, "umap_annotated_splitgroup.pdf"), height = 7, width = 15)
DimPlot(obj, reduction = "umap.unintegrated", split.by = "group", group.by = 'sctype_classification')
dev.off()
