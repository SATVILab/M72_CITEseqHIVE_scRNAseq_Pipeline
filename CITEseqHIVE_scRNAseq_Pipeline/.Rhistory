#} else {
#print(paste("Skipping tree plot for", cell_type, "under", stim, "condition due to insufficient clusters"))
#}
#} else {
#print(paste("No enriched terms found for", cell_type, "under", stim, "condition"))
#}
# Gene Set Enrichment Analysis (GSEA)
gsea_res <- gseGO(geneList = gene_list,
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 1, #CHANGE THIS!!!
verbose = FALSE,
by = "fgsea")
# Save GSEA result to an RDS file
saveRDS(gsea_res, file = paste0(dir_save, cell_type, "_", stim, "_gsea_results.rds"))
# Plot GSEA results
plot <- dotplot(gsea_res, showCategory=30) + ggtitle("dotplot for GSEA")
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_dotplot.png"), plot = plot, width = 8, height = 12)
# Gene-concept network
## convert gene ID to Symbol
egox <- setReadable(gsea_res, 'org.Hs.eg.db', 'ENTREZID')
p1 <- cnetplot(egox, color.params = list(foldChange = gene_list))
## categorySize can be scaled by 'pvalue' or 'geneNum'
p2 <- cnetplot(egox, categorySize="pvalue", color.params = list(foldChange = gene_list)) +
scale_color_gradient2(name='fold change', low='steelblue', high='firebrick')
p3 <- cnetplot(egox, color.params = list(foldChange = gene_list), circular = TRUE, colorEdge = TRUE) +
scale_color_gradient2(name='fold change', low='steelblue', high='firebrick')
plot <- cowplot::plot_grid(p2, p3, ncol=2, labels=LETTERS[1:2], rel_widths=c(.8, 1.2))
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_cnetplots.png"), plot = plot, width = 25, height = 12)
# Heatmap classification
p1 <- heatplot(egox, showCategory=5)
p2 <- heatplot(egox, foldChange=gene_list, showCategory=5) +
scale_fill_gradient2(name='fold change', low='steelblue', high='firebrick')
plot <- cowplot::plot_grid(p1, p2, ncol=1, labels=LETTERS[1:2])
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_heatmaps.png"), plot = plot, width = 25, height = 10)
# Ridgeplot
plot <- ridgeplot(gsea_res)
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_ridgeplot.png"), plot = plot, width = 10, height = 15)
# Running score and preranked list
p1 <- gseaplot(gsea_res, geneSetID = 1, by = "runningScore", title = gsea_res$Description[1])
p2 <- gseaplot(gsea_res, geneSetID = 1, by = "preranked", title = gsea_res$Description[1])
p3 <- gseaplot(gsea_res, geneSetID = 1, title = gsea_res$Description[1])
cowplot::plot_grid(p1, p2, p3, ncol=1, labels=LETTERS[1:3])
gseaplot2(gsea_res, geneSetID = 1, title = gsea_res$Description[1])
gseaplot2(gsea_res, geneSetID = 1:3)
plot <- gseaplot2(gsea_res, geneSetID = 1:3, pvalue_table = TRUE,
color = c("#E495A5", "#86B875", "#7DB0DD"), ES_geom = "dot")
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_gseaplot.png"), plot = plot, width = 15, height = 15)
}
}
}
# Identify unique features in obj@meta.data$sctype_classification and obj@meta.data$STIM
sctype_classifications <- setdiff(unique(obj$sctype_classification), "Plasma B cells")
stim_conditions <- unique(obj$STIM)
# Directory to save plots
dir_save <- "output/dataset_full/"
# Outer loop through each STIM condition
for (stim in stim_conditions) {
# Subset the Seurat obj based on STIM condition
obj_stim <- subset(obj, STIM == stim)
# Inner loop through each cell type in sctype_classification
for (cell_type in sctype_classifications) {
# Subset the Seurat obj based on sctype_classification
obj_subset <- subset(obj_stim, sctype_classification == cell_type)
# Set these as identities in the Seurat obj_subset
obj_subset <- SetIdent(obj_subset, value = obj_subset$VISIT)
# Perform differential expression
de_results <- FindMarkers(
obj_subset,
ident.1 = "D37",
ident.2 = "D0",
logfc.threshold = 0.25,  # Log fold change threshold (adjust as needed)
test.use = "LR",  # Using logistic regression
p.value = 0.05
)
# Adjust p-values for multiple testing using Benjamini-Hochberg method
de_results$padj <- p.adjust(de_results$p_val, method = "BH")
# Filter results based on adjusted p-value
significant_genes <- subset(de_results, padj < 0.1)
# Add gene names from row names to a new column called 'gene'
significant_genes$gene <- rownames(significant_genes)
# Determine the number of top genes to use
num_top_genes <- min(20, nrow(significant_genes))
# Sort by p-value and select the top genes
top_genes <- significant_genes %>%
arrange(p_val) %>%
slice(1:num_top_genes)
# Create a volcano plot
volcano_plot <- ggplot(significant_genes, aes(x=avg_log2FC, y=-log10(p_val))) +
geom_point(aes(col=padj < 0.1), alpha=0.5) +  # Color points by adjusted p-value threshold
scale_color_manual(values = c("grey", "red")) +
theme_minimal() +
labs(x="Log2 Fold Change", y="-Log10 P-value", title=paste("Volcano Plot of Differential Expression for", cell_type, "under", stim, "condition")) +
theme(legend.position="none")
# Highlight and label the top genes
volcano_plot <- volcano_plot +
geom_point(data=top_genes, aes(x=avg_log2FC, y=-log10(p_val)), color="red", size=3) +
geom_text(data=top_genes, aes(x=avg_log2FC, y=-log10(p_val), label=gene), vjust=1.5, color="black", size=3)
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_volcanoDEG_plot.png"), plot = volcano_plot, width = 8, height = 5)
# Create heatmaps
# Extract the expression data for significant genes
all_genes <- rownames(obj_subset)
sig_genes <- intersect(all_genes, rownames(significant_genes))
data_matrix <- GetAssayData(obj_subset, slot = "data")[sig_genes, ]
if (!is.matrix(data_matrix)) {
data_matrix <- as.matrix(data_matrix)
}
# Create the heatmap
#Heatmap(data_matrix,
#       cluster_rows = TRUE,
#      cluster_columns = TRUE,
#     show_row_names = TRUE,
#   show_column_names = TRUE,
#   row_title = "Significant Genes",
#  column_title = "Samples",
# heatmap_legend_param = list(title = "Expression Level", at = c(min(data_matrix, na.rm = TRUE), max(data_matrix, na.rm = TRUE)), labels = c("Low", "High")))
# Create heatmap of only top genes
# Ensure gene names are in a column if they are currently row names
if("gene" %in% colnames(top_genes)) {
top_gene_names <- top_genes$gene
} else {
top_gene_names <- rownames(top_genes)
}
# Extract the expression data for these top genes
data_matrix <- GetAssayData(obj_subset, slot = "data")[top_gene_names, ]
# Convert to matrix if not already
if (!is.matrix(data_matrix)) {
data_matrix <- as.matrix(data_matrix)
}
# Create the heatmap
#Heatmap(data_matrix,
#       cluster_rows = TRUE,
#      cluster_columns = TRUE,
#     show_row_names = TRUE,
#    show_column_names = TRUE,
#   row_title = "Top Significant Genes",
#  column_title = "Samples",
# heatmap_legend_param = list(title = "Expression Level", at = c(min(data_matrix, na.rm = TRUE), max(data_matrix, na.rm = TRUE)), labels = c("Low", "High")))
# Dot plots
# Sort by p-value and select the top genes
top_genes <- significant_genes %>%
arrange(p_val) %>%
slice(1:num_top_genes)
# Create a dot plot
plot <- ggplot(top_genes,
aes(x = gene, y = avg_log2FC, size = -log10(p_val), color = avg_log2FC)) +
geom_point(alpha=0.6) +
scale_size(range = c(3, 8)) +
scale_color_gradient(low = "blue", high = "red") +
theme_bw() +
labs(title = paste("Top Differentially Expressed Genes for", cell_type, "under", stim, "condition"),
x = "Gene", y = "Average Log Fold Change") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_dotDEGstats_plot.png"), plot = plot, width = 8, height = 5)
# Create a DotPlot in Seurat
# Extract the 'gene' column as a vector
top_DEG <- top_genes$gene
# Check if top_DEG contains any genes before plotting
if (length(top_DEG) > 0) {
plot <- DotPlot(obj_subset, features = top_DEG, cols = c("blue", "red")) +
theme_bw() +
ggtitle(paste("Top Differentially Expressed Genes for", cell_type, "under", stim, "condition")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(angle = 90, vjust = 0.5, hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_dotDEG_plot.png"), plot = plot, width = 6, height = 4)
} else {
print(paste("No top DEGs found for DotPlot for", cell_type, "under", stim, "condition"))
}
# Violin plot for a few selected genes
plot <- VlnPlot(obj_subset, features = c(sig_genes[1:num_top_genes]), group.by = "VISIT",
pt.size = 0)
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_violinDEG_plot.png"), plot = plot, width = 8, height = 5)
# ClusterProfiler Analysis
# Prepare gene list for GSEA (ranks based on logFC or other metric)
gene_list <- de_results$avg_log2FC
names(gene_list) <- rownames(de_results)
gene_list <- sort(gene_list, decreasing = TRUE)
# Convert gene symbols to Entrez IDs for clusterProfiler
sig_genes <- significant_genes$gene
sig_genes_entrez <- bitr(sig_genes, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
gene_list_entrez <- bitr(names(gene_list), fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
gene_list <- setNames(gene_list, gene_list_entrez$ENTREZID)
# Remove any NA values from gene_list
gene_list <- na.omit(gene_list)
# Verify gene_list content
head(gene_list)
# Over-representation analysis (ORA)
ego <- enrichGO(gene = sig_genes_entrez$ENTREZID,
OrgDb = org.Hs.eg.db,
ont = "BP", # Biological Process
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
# Check if ego contains any enriched terms before plotting
if (nrow(ego) > 0) {
# Plot ORA results
dotplot(ego, showCategory = 20) + ggtitle("Over-representation Analysis")
barplot(ego, showCategory=20)
# Enrichment map
# Compute the term similarity matrix
ego <- pairwise_termsim(ego)
emapplot(ego) + ggtitle("Enrichment Map of GO Terms")
# Gene-concept network
## convert gene ID to Symbol
egox <- setReadable(ego, 'org.Hs.eg.db', 'ENTREZID')
p1 <- cnetplot(egox, color.params = list(foldChange = gene_list))
## categorySize can be scaled by 'pvalue' or 'geneNum'
p2 <- cnetplot(egox, categorySize="pvalue", color.params = list(foldChange = gene_list)) +
scale_color_gradient2(name='fold change', low='steelblue', high='firebrick')
p3 <- cnetplot(egox, color.params = list(foldChange = gene_list), circular = TRUE, colorEdge = TRUE) +
scale_color_gradient2(name='fold change', low='steelblue', high='firebrick')
plot <- cowplot::plot_grid(p2, p3, ncol=2, labels=LETTERS[1:2], rel_widths=c(.8, 1.2))
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_ORA_cnetplots.png"), plot = plot, width = 25, height = 12)
# Heatmap classification
p1 <- heatplot(egox, showCategory=5)
p2 <- heatplot(egox, foldChange=gene_list, showCategory=10) +
scale_fill_gradient2(name='fold change', low='steelblue', high='firebrick')
plot <- cowplot::plot_grid(p1, p2, ncol=1, labels=LETTERS[1:2])
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_ORA_heatmaps.png"), plot = plot, width = 25, height = 10)
# Tree plot
#egox2 <- pairwise_termsim(egox)
#if (nrow(egox2) > 3) {
#p1 <- treeplot(egox2)
#p2 <- treeplot(egox2, hclust_method = "average")
#plot <- aplot::plot_list(p1, p2, tag_levels='A')
#ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_ORA_treeplots.png"), plot = plot, width = 25, height = 10)
#} else {
#print(paste("Skipping tree plot for", cell_type, "under", stim, "condition due to insufficient clusters"))
#}
#} else {
#print(paste("No enriched terms found for", cell_type, "under", stim, "condition"))
#}
# Gene Set Enrichment Analysis (GSEA)
gsea_res <- gseGO(geneList = gene_list,
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 1, #CHANGE THIS!!!
verbose = FALSE,
by = "fgsea")
# Save GSEA result to an RDS file
saveRDS(gsea_res, file = paste0(dir_save, cell_type, "_", stim, "_gsea_results.rds"))
# Plot GSEA results
plot <- dotplot(gsea_res, showCategory=30) + ggtitle("dotplot for GSEA")
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_dotplot.png"), plot = plot, width = 8, height = 12)
# Gene-concept network
## convert gene ID to Symbol
egox <- setReadable(gsea_res, 'org.Hs.eg.db', 'ENTREZID')
p1 <- cnetplot(egox, color.params = list(foldChange = gene_list))
## categorySize can be scaled by 'pvalue' or 'geneNum'
p2 <- cnetplot(egox, categorySize="pvalue", color.params = list(foldChange = gene_list)) +
scale_color_gradient2(name='fold change', low='steelblue', high='firebrick')
p3 <- cnetplot(egox, color.params = list(foldChange = gene_list), circular = TRUE, colorEdge = TRUE) +
scale_color_gradient2(name='fold change', low='steelblue', high='firebrick')
plot <- cowplot::plot_grid(p2, p3, ncol=2, labels=LETTERS[1:2], rel_widths=c(.8, 1.2))
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_cnetplots.png"), plot = plot, width = 25, height = 12)
# Heatmap classification
p1 <- heatplot(egox, showCategory=5)
p2 <- heatplot(egox, foldChange=gene_list, showCategory=5) +
scale_fill_gradient2(name='fold change', low='steelblue', high='firebrick')
plot <- cowplot::plot_grid(p1, p2, ncol=1, labels=LETTERS[1:2])
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_heatmaps.png"), plot = plot, width = 25, height = 10)
# Ridgeplot
plot <- ridgeplot(gsea_res)
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_ridgeplot.png"), plot = plot, width = 10, height = 15)
# Running score and preranked list
p1 <- gseaplot(gsea_res, geneSetID = 1, by = "runningScore", title = gsea_res$Description[1])
p2 <- gseaplot(gsea_res, geneSetID = 1, by = "preranked", title = gsea_res$Description[1])
p3 <- gseaplot(gsea_res, geneSetID = 1, title = gsea_res$Description[1])
cowplot::plot_grid(p1, p2, p3, ncol=1, labels=LETTERS[1:3])
gseaplot2(gsea_res, geneSetID = 1, title = gsea_res$Description[1])
gseaplot2(gsea_res, geneSetID = 1:3)
plot <- gseaplot2(gsea_res, geneSetID = 1:3, pvalue_table = TRUE,
color = c("#E495A5", "#86B875", "#7DB0DD"), ES_geom = "dot")
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_gseaplot.png"), plot = plot, width = 15, height = 15)
}
}
}
# Identify unique features in obj@meta.data$sctype_classification and obj@meta.data$STIM
sctype_classifications <- setdiff(unique(obj$sctype_classification), "Plasma B cells")
stim_conditions <- setdiff(unique(obj$STIM), "UNSTIM")
# Directory to save plots
dir_save <- "output/dataset_full/"
# Outer loop through each STIM condition
for (stim in stim_conditions) {
# Subset the Seurat obj based on STIM condition
obj_stim <- subset(obj, STIM == stim)
# Inner loop through each cell type in sctype_classification
for (cell_type in sctype_classifications) {
# Subset the Seurat obj based on sctype_classification
obj_subset <- subset(obj_stim, sctype_classification == cell_type)
# Set these as identities in the Seurat obj_subset
obj_subset <- SetIdent(obj_subset, value = obj_subset$VISIT)
# Perform differential expression
de_results <- FindMarkers(
obj_subset,
ident.1 = "D37",
ident.2 = "D0",
logfc.threshold = 0.25,  # Log fold change threshold (adjust as needed)
test.use = "LR",  # Using logistic regression
p.value = 0.05
)
# Adjust p-values for multiple testing using Benjamini-Hochberg method
de_results$padj <- p.adjust(de_results$p_val, method = "BH")
# Filter results based on adjusted p-value
significant_genes <- subset(de_results, padj < 0.1)
# Add gene names from row names to a new column called 'gene'
significant_genes$gene <- rownames(significant_genes)
# Determine the number of top genes to use
num_top_genes <- min(20, nrow(significant_genes))
# Sort by p-value and select the top genes
top_genes <- significant_genes %>%
arrange(p_val) %>%
slice(1:num_top_genes)
# Create a volcano plot
volcano_plot <- ggplot(significant_genes, aes(x=avg_log2FC, y=-log10(p_val))) +
geom_point(aes(col=padj < 0.1), alpha=0.5) +  # Color points by adjusted p-value threshold
scale_color_manual(values = c("grey", "red")) +
theme_minimal() +
labs(x="Log2 Fold Change", y="-Log10 P-value", title=paste("Volcano Plot of Differential Expression for", cell_type, "under", stim, "condition")) +
theme(legend.position="none")
# Highlight and label the top genes
volcano_plot <- volcano_plot +
geom_point(data=top_genes, aes(x=avg_log2FC, y=-log10(p_val)), color="red", size=3) +
geom_text(data=top_genes, aes(x=avg_log2FC, y=-log10(p_val), label=gene), vjust=1.5, color="black", size=3)
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_volcanoDEG_plot.png"), plot = volcano_plot, width = 8, height = 5)
# Create heatmaps
# Extract the expression data for significant genes
all_genes <- rownames(obj_subset)
sig_genes <- intersect(all_genes, rownames(significant_genes))
data_matrix <- GetAssayData(obj_subset, slot = "data")[sig_genes, ]
if (!is.matrix(data_matrix)) {
data_matrix <- as.matrix(data_matrix)
}
# Create the heatmap
#Heatmap(data_matrix,
#       cluster_rows = TRUE,
#      cluster_columns = TRUE,
#     show_row_names = TRUE,
#   show_column_names = TRUE,
#   row_title = "Significant Genes",
#  column_title = "Samples",
# heatmap_legend_param = list(title = "Expression Level", at = c(min(data_matrix, na.rm = TRUE), max(data_matrix, na.rm = TRUE)), labels = c("Low", "High")))
# Create heatmap of only top genes
# Ensure gene names are in a column if they are currently row names
if("gene" %in% colnames(top_genes)) {
top_gene_names <- top_genes$gene
} else {
top_gene_names <- rownames(top_genes)
}
# Extract the expression data for these top genes
data_matrix <- GetAssayData(obj_subset, slot = "data")[top_gene_names, ]
# Convert to matrix if not already
if (!is.matrix(data_matrix)) {
data_matrix <- as.matrix(data_matrix)
}
# Create the heatmap
#Heatmap(data_matrix,
#       cluster_rows = TRUE,
#      cluster_columns = TRUE,
#     show_row_names = TRUE,
#    show_column_names = TRUE,
#   row_title = "Top Significant Genes",
#  column_title = "Samples",
# heatmap_legend_param = list(title = "Expression Level", at = c(min(data_matrix, na.rm = TRUE), max(data_matrix, na.rm = TRUE)), labels = c("Low", "High")))
# Dot plots
# Sort by p-value and select the top genes
top_genes <- significant_genes %>%
arrange(p_val) %>%
slice(1:num_top_genes)
# Create a dot plot
plot <- ggplot(top_genes,
aes(x = gene, y = avg_log2FC, size = -log10(p_val), color = avg_log2FC)) +
geom_point(alpha=0.6) +
scale_size(range = c(3, 8)) +
scale_color_gradient(low = "blue", high = "red") +
theme_bw() +
labs(title = paste("Top Differentially Expressed Genes for", cell_type, "under", stim, "condition"),
x = "Gene", y = "Average Log Fold Change") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_dotDEGstats_plot.png"), plot = plot, width = 8, height = 5)
# Create a DotPlot in Seurat
# Extract the 'gene' column as a vector
top_DEG <- top_genes$gene
# Check if top_DEG contains any genes before plotting
if (length(top_DEG) > 0) {
plot <- DotPlot(obj_subset, features = top_DEG, cols = c("blue", "red")) +
theme_bw() +
ggtitle(paste("Top Differentially Expressed Genes for", cell_type, "under", stim, "condition")) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1),
axis.text.y = element_text(angle = 90, vjust = 0.5, hjust = 0.5),
axis.title.x = element_blank(),
axis.title.y = element_blank())
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_dotDEG_plot.png"), plot = plot, width = 6, height = 4)
} else {
print(paste("No top DEGs found for DotPlot for", cell_type, "under", stim, "condition"))
}
# Violin plot for a few selected genes
plot <- VlnPlot(obj_subset, features = c(sig_genes[1:num_top_genes]), group.by = "VISIT",
pt.size = 0)
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_violinDEG_plot.png"), plot = plot, width = 8, height = 5)
# ClusterProfiler Analysis
# Prepare gene list for GSEA (ranks based on logFC or other metric)
gene_list <- de_results$avg_log2FC
names(gene_list) <- rownames(de_results)
gene_list <- sort(gene_list, decreasing = TRUE)
# Convert gene symbols to Entrez IDs for clusterProfiler
sig_genes <- significant_genes$gene
sig_genes_entrez <- bitr(sig_genes, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
gene_list_entrez <- bitr(names(gene_list), fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)
gene_list <- setNames(gene_list, gene_list_entrez$ENTREZID)
# Remove any NA values from gene_list
gene_list <- na.omit(gene_list)
# Verify gene_list content
head(gene_list)
# Over-representation analysis (ORA)
ego <- enrichGO(gene = sig_genes_entrez$ENTREZID,
OrgDb = org.Hs.eg.db,
ont = "BP", # Biological Process
pAdjustMethod = "BH",
pvalueCutoff = 0.05,
qvalueCutoff = 0.05,
readable = TRUE)
# Check if ego contains any enriched terms before plotting
if (nrow(ego) > 0) {
# Plot ORA results
dotplot(ego, showCategory = 20) + ggtitle("Over-representation Analysis")
barplot(ego, showCategory=20)
# Enrichment map
# Compute the term similarity matrix
ego <- pairwise_termsim(ego)
emapplot(ego) + ggtitle("Enrichment Map of GO Terms")
# Gene-concept network
## convert gene ID to Symbol
egox <- setReadable(ego, 'org.Hs.eg.db', 'ENTREZID')
p1 <- cnetplot(egox, color.params = list(foldChange = gene_list))
## categorySize can be scaled by 'pvalue' or 'geneNum'
p2 <- cnetplot(egox, categorySize="pvalue", color.params = list(foldChange = gene_list)) +
scale_color_gradient2(name='fold change', low='steelblue', high='firebrick')
p3 <- cnetplot(egox, color.params = list(foldChange = gene_list), circular = TRUE, colorEdge = TRUE) +
scale_color_gradient2(name='fold change', low='steelblue', high='firebrick')
plot <- cowplot::plot_grid(p2, p3, ncol=2, labels=LETTERS[1:2], rel_widths=c(.8, 1.2))
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_ORA_cnetplots.png"), plot = plot, width = 25, height = 12)
# Heatmap classification
p1 <- heatplot(egox, showCategory=5)
p2 <- heatplot(egox, foldChange=gene_list, showCategory=10) +
scale_fill_gradient2(name='fold change', low='steelblue', high='firebrick')
plot <- cowplot::plot_grid(p1, p2, ncol=1, labels=LETTERS[1:2])
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_ORA_heatmaps.png"), plot = plot, width = 25, height = 10)
# Tree plot
#egox2 <- pairwise_termsim(egox)
#if (nrow(egox2) > 3) {
#p1 <- treeplot(egox2)
#p2 <- treeplot(egox2, hclust_method = "average")
#plot <- aplot::plot_list(p1, p2, tag_levels='A')
#ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_ORA_treeplots.png"), plot = plot, width = 25, height = 10)
#} else {
#print(paste("Skipping tree plot for", cell_type, "under", stim, "condition due to insufficient clusters"))
#}
#} else {
#print(paste("No enriched terms found for", cell_type, "under", stim, "condition"))
#}
# Gene Set Enrichment Analysis (GSEA)
gsea_res <- gseGO(geneList = gene_list,
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
pvalueCutoff = 1, #CHANGE THIS!!!
verbose = FALSE,
by = "fgsea")
# Save GSEA result to an RDS file
saveRDS(gsea_res, file = paste0(dir_save, cell_type, "_", stim, "_gsea_results.rds"))
# Plot GSEA results
plot <- dotplot(gsea_res, showCategory=30) + ggtitle("dotplot for GSEA")
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_dotplot.png"), plot = plot, width = 8, height = 12)
# Gene-concept network
## convert gene ID to Symbol
egox <- setReadable(gsea_res, 'org.Hs.eg.db', 'ENTREZID')
p1 <- cnetplot(egox, color.params = list(foldChange = gene_list))
## categorySize can be scaled by 'pvalue' or 'geneNum'
p2 <- cnetplot(egox, categorySize="pvalue", color.params = list(foldChange = gene_list)) +
scale_color_gradient2(name='fold change', low='steelblue', high='firebrick')
p3 <- cnetplot(egox, color.params = list(foldChange = gene_list), circular = TRUE, colorEdge = TRUE) +
scale_color_gradient2(name='fold change', low='steelblue', high='firebrick')
plot <- cowplot::plot_grid(p2, p3, ncol=2, labels=LETTERS[1:2], rel_widths=c(.8, 1.2))
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_cnetplots.png"), plot = plot, width = 25, height = 12)
# Heatmap classification
p1 <- heatplot(egox, showCategory=5)
p2 <- heatplot(egox, foldChange=gene_list, showCategory=5) +
scale_fill_gradient2(name='fold change', low='steelblue', high='firebrick')
plot <- cowplot::plot_grid(p1, p2, ncol=1, labels=LETTERS[1:2])
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_heatmaps.png"), plot = plot, width = 25, height = 10)
# Ridgeplot
plot <- ridgeplot(gsea_res)
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_ridgeplot.png"), plot = plot, width = 10, height = 15)
# Running score and preranked list
p1 <- gseaplot(gsea_res, geneSetID = 1, by = "runningScore", title = gsea_res$Description[1])
p2 <- gseaplot(gsea_res, geneSetID = 1, by = "preranked", title = gsea_res$Description[1])
p3 <- gseaplot(gsea_res, geneSetID = 1, title = gsea_res$Description[1])
cowplot::plot_grid(p1, p2, p3, ncol=1, labels=LETTERS[1:3])
gseaplot2(gsea_res, geneSetID = 1, title = gsea_res$Description[1])
gseaplot2(gsea_res, geneSetID = 1:3)
plot <- gseaplot2(gsea_res, geneSetID = 1:3, pvalue_table = TRUE,
color = c("#E495A5", "#86B875", "#7DB0DD"), ES_geom = "dot")
ggsave(filename = paste0(dir_save, cell_type, "_", stim, "_GSEA_gseaplot.png"), plot = plot, width = 15, height = 15)
}
}
}
