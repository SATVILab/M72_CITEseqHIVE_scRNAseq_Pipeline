x = "",
y = "nCount / nFeature") +
facet_grid(scales = "free_y")
#scale_y_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 0.5))
seqdepthbox_plot <- paste0(file_name, "_QCplots_SeqDepthBox_unfiltered.pdf")
pdf(paste0(dir_save, seqdepthbox_plot), height = 5, width = 5)
print(plot11)
dev.off()
plot11 <- ggplot(obj@meta.data, aes(x = SampleName, y = SeqDepth, fill = SampleName)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position=position_jitter(width=0.05), size=0.5) +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Expression Level per Gene",
x = "",
y = "nCount / nFeature") +
facet_grid(scales = "free_y")
seqdepthbox_plot <- paste0(file_name, "_QCplots_SeqDepthBox_unfiltered.pdf")
pdf(paste0(dir_save, seqdepthbox_plot), height = 5, width = 5)
print(plot11)
dev.off()
plot11 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqDepth, fill = orig.ident)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position=position_jitter(width=0.05), size=0.5) +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Expression Level per Gene",
x = "",
y = "nCount / nFeature") +
facet_grid(scales = "free_y")
seqdepthbox_plot <- paste0(file_name, "_QCplots_SeqDepthBox_unfiltered.pdf")
pdf(paste0(dir_save, seqdepthbox_plot), height = 5, width = 5)
print(plot11)
dev.off()
plot11 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqDepth, fill = orig.ident)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position=position_jitter(width=0.05), size=0.5) +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Expression Level per Gene",
x = "",
y = "nCount / nFeature") +
scale_y_continuous(limits = c(0, 15), breaks = seq(0, 5, by = 0.1))
seqdepthbox_plot <- paste0(file_name, "_QCplots_SeqDepthBox_unfiltered.pdf")
pdf(paste0(dir_save, seqdepthbox_plot), height = 5, width = 5)
print(plot11)
dev.off()
plot11 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqDepth, fill = orig.ident)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position=position_jitter(width=0.05), size=0.5) +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Expression Level per Gene",
x = "",
y = "nCount / nFeature") +
scale_y_continuous(limits = c(0, 5), breaks = seq(0, 5, by = 0.1))
seqdepthbox_plot <- paste0(file_name, "_QCplots_SeqDepthBox_unfiltered.pdf")
pdf(paste0(dir_save, seqdepthbox_plot), height = 5, width = 5)
print(plot11)
dev.off()
plot11 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqDepth, fill = orig.ident)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position=position_jitter(width=0.05), size=0.5) +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Expression Level per Gene",
x = "",
y = "nCount / nFeature") +
scale_y_continuous(limits = c(0, 4), breaks = seq(0, 4, by = 0.5))
seqdepthbox_plot <- paste0(file_name, "_QCplots_SeqDepthBox_unfiltered.pdf")
pdf(paste0(dir_save, seqdepthbox_plot), height = 5, width = 5)
print(plot11)
dev.off()
ls()
rm(list=ls())
dir_save <- "output/"
# CHECK THIS CONTAINS ONLY NECESSARY LIBRARIES
library(SingleCellExperiment)
library(Seurat)
library(SeuratObject)
library(scCustomize)
library(tidyr)
library(dplyr)
library(clustree)
library(ggpubr)
library(patchwork)
library(magrittr)
library(HGNChelper)
library(openxlsx)
library(multtest)
library(metap)
library(ggplot2)
library(gridExtra)
library(cowplot)
plot12 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqDepth, fill = orig.ident)) +
geom_violin(trim = F) +
stat_summary(fun=median, geom="crossbar", width=0.5,
color="black", linetype="solid") +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Expression Level per Gene",
x = "",
y = "nCount / nFeature") +
scale_y_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 0.5))
# Use a loop to load Seurat objects from each BeeNetPLUS_v2 run, visualize raw QC data, filter out low quality cells and merge the filtered data into a new Seurat object.
# Create a list of all files in the "data" subdirectory
directory <- "data"
files <- list.files(directory, full.names = TRUE)
# Filter to keep only the Rdata files
rdata_files <- files[grepl("\\.Rdata$", files)]
# Loop through each Rdata file, load the Seurat object, perform filtering, and merge into a new Seurat object
for (data in rdata_files) {
# Extract the file names without extension
file_name <- tools::file_path_sans_ext(basename(data))
# Load the Seurat object and assign it a unique name using the associated .Rdata file name
load(data)
# Split the MULTI_ID column into HIVE, PID, and STIM columns. Do not remove the MULTI_ID column.
obj@meta.data <- separate(obj@meta.data, MULTI_ID, into = c("HIVE", "PID", "STIM"), sep = "-", remove = FALSE)
# Save the metadata for each run to a .csv with the same file name as the original .Rdata file
csv_file <- paste0(file_name, "_metadata.csv")
write.csv(obj@meta.data, file = file.path(dir_save, paste0(csv_file)), row.names = TRUE, quote = FALSE)
# Visualize basic unfiltered QC metrics
plot1 <- VlnPlot(obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3, pt.size = 0)
plot2 <- ggplot(obj@meta.data, aes(x = nCount_RNA)) +
geom_histogram(bins = 100)
plot3 <- ggplotGrob(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "percent.mito"))
plot4 <- ggplotGrob(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA"))
vln_plots <- paste0(file_name, "_QCplots_vln_unfiltered.pdf")
pdf(paste0(dir_save, vln_plots), height = 5, width = 15)
print(plot1)
dev.off()
qc_plots <- paste0(file_name, "_QCplots_unfiltered.pdf")
pdf(paste0(dir_save, qc_plots), height = 5, width = 15)
grid.arrange(plot2, plot3, plot4,
ncol = 3)
dev.off()
# Plot additional unfiltered QC metrics to assess sequencing depth
# Plot total reads vs nCount_RNA #######################################################################################################
plot5 <- ggplot(obj@meta.data, aes(x = reads.Total, y = nCount_RNA)) +
geom_point(aes(color = SampleName)) +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "",
x = "Total reads",
y = "nCount")
totalvcount_plot <- paste0(file_name, "_QCplots_TotalReadsVsCounts_unfiltered.pdf")
pdf(paste0(dir_save, totalvcount_plot), height = 5, width = 5)
print(plot5)
dev.off()
# Plot exon reads vs nCount_RNA
plot6 <- ggplot(obj@meta.data, aes(x = ExonReads, y = nCount_RNA)) +
geom_point(aes(color = SampleName)) +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "",
x = "Exon reads",
y = "nCount")
exonvcount_plot <- paste0(file_name, "_QCplots_ExonReadsVsCounts_unfiltered.pdf")
pdf(paste0(dir_save, exonvcount_plot), height = 5, width = 5)
print(plot6)
dev.off()
# Plot exon complexity (ExonReads/nCount_RNA)
plot7 <- ggplot(obj@meta.data, aes(x = orig.ident, y = Complexity, fill = orig.ident)) +
geom_violin(trim = F) +
stat_summary(fun=median, geom="crossbar", width=0.5,
color="black", linetype="solid") +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Complexity",
x = "",
y = "Exon reads / nCount") +
scale_y_continuous(limits = c(0, 5), breaks = seq(0, 5, by = 0.5))
exoncomplexity_plot <- paste0(file_name, "_QCplots_ExonComplexity_unfiltered.pdf")
pdf(paste0(dir_save, exoncomplexity_plot), height = 5, width = 5)
print(plot7)
dev.off()
# Create a column "TotalComplexity" of reads.Total/nCount
obj@meta.data$TotalComplexity <- obj@meta.data$reads.Total / obj@meta.data$nCount_RNA
plot8 <- ggplot(obj@meta.data, aes(x = orig.ident, y = TotalComplexity, fill = orig.ident)) +
geom_violin(trim = F) +
stat_summary(fun=median, geom="crossbar", width=0.5,
color="black", linetype="solid") +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Complexity",
x = "",
y = "Total reads / nCount") +
facet_grid(scales = "free_y")
totalcomplexity_plot <- paste0(file_name, "_QCplots_TotalComplexity_unfiltered.pdf")
pdf(paste0(dir_save, totalcomplexity_plot), height = 5, width = 5)
print(plot8)
dev.off()
# Create a column "SeqSat" and visualize
obj@meta.data$SeqSat <- 1 - (obj@meta.data$nCount_RNA / obj@meta.data$reads.Total)
plot9 <- ggplot(obj@meta.data, aes(x = reads.Total, y = SeqSat)) +
geom_point(aes(color = orig.ident)) +
geom_smooth(se=FALSE) +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Sequencing Saturation",
x = "Total Reads",
y = "Sequencing Saturation")
seqsat_plot <- paste0(file_name, "_QCplots_SeqSaturation_unfiltered.pdf")
pdf(paste0(dir_save, seqsat_plot), height = 5, width = 5)
print(plot9)
dev.off()
plot10 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqSat, fill = orig.ident)) +
geom_violin(trim = F) +
stat_summary(fun=median, geom="crossbar", width=0.5,
color="black", linetype="solid") +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Sequencing Saturation",
x = "",
y = "Sequencing Saturation") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1))
seqsatvln_plot <- paste0(file_name, "_QCplots_SeqSaturationVln_unfiltered.pdf")
pdf(paste0(dir_save, seqsatvln_plot), height = 5, width = 5)
print(plot10)
dev.off()
# Create a column "SeqDepth" of nCount/nFeature and visualize
obj@meta.data$SeqDepth <- obj@meta.data$nCount_RNA / obj@meta.data$nFeature_RNA
plot11 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqDepth, fill = orig.ident)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position=position_jitter(width=0.05), size=0.5) +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Expression Level per Gene",
x = "",
y = "nCount / nFeature") +
scale_y_continuous(limits = c(0, 4), breaks = seq(0, 4, by = 0.5))
seqdepthbox_plot <- paste0(file_name, "_QCplots_SeqDepthBox_unfiltered.pdf")
pdf(paste0(dir_save, seqdepthbox_plot), height = 5, width = 5)
print(plot11)
dev.off()
# Filter out cells that have unique feature counts above 2500 or less than 200 and >15% mitochondrial counts
# The Seurat object "obj" produced by BeeNetPLUS_v2 contains QC metadata based on HTODemux. Cells defined as "Doublet", "Negative", or "LQ" should also be filtered out.
obj <- subset(obj, subset = SampleName != "Doublet" & SampleName != "Negative" & SampleName != "LQ")
# Now apply filters for feature counts and mitochondrial counts
obj <- subset(obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mito < 0.15)
# Assign the Seurat object with a unique name using the associated .Rdata file name
assign(paste0("obj_filtered_", file_name), obj)
}
plot12 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqDepth, fill = orig.ident)) +
geom_violin(trim = F) +
stat_summary(fun=median, geom="crossbar", width=0.5,
color="black", linetype="solid") +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Expression Level per Gene",
x = "",
y = "nCount / nFeature") +
scale_y_continuous(limits = c(0, 10), breaks = seq(0, 10, by = 0.5))
seqdepthvln_plot <- paste0(file_name, "_QCplots_SeqDepthVln_unfiltered.pdf")
pdf(paste0(dir_save, seqdepthvln_plot), height = 5, width = 5)
print(plot12)
dev.off()
qc_plots_additional <- paste0(file_name, "_QCplots_unfiltered_additional.pdf")
pdf(paste0(dir_save, qc_plots_additional), height = 20, width = 10)
grid.arrange(plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12)
dev.off()
plot11 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqDepth, fill = orig.ident)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position=position_jitter(width=0.05), size=0.5) +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Expression Level per Gene",
x = "",
y = "nCount / nFeature") +
scale_y_continuous(limits = c(0, 5), breaks = seq(0, 5, by = 0.5))
seqdepthbox_plot <- paste0(file_name, "_QCplots_SeqDepthBox_unfiltered.pdf")
pdf(paste0(dir_save, seqdepthbox_plot), height = 5, width = 5)
print(plot11)
dev.off()
plot12 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqDepth, fill = orig.ident)) +
geom_violin(trim = F) +
stat_summary(fun=median, geom="crossbar", width=0.5,
color="black", linetype="solid") +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Expression Level per Gene",
x = "",
y = "nCount / nFeature") +
scale_y_continuous(limits = c(0, 5), breaks = seq(0, 5, by = 0.5))
seqdepthvln_plot <- paste0(file_name, "_QCplots_SeqDepthVln_unfiltered.pdf")
pdf(paste0(dir_save, seqdepthvln_plot), height = 5, width = 5)
print(plot12)
dev.off()
qc_plots_additional <- paste0(file_name, "_QCplots_unfiltered_additional.pdf")
pdf(paste0(dir_save, qc_plots_additional), height = 20, width = 10)
grid.arrange(plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12)
dev.off()
qc_plots_additional <- paste0(file_name, "_QCplots_unfiltered_additional.pdf")
pdf(paste0(dir_save, qc_plots_additional), height = 10, width = 15)
grid.arrange(plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12)
dev.off()
qc_plots_additional <- paste0(file_name, "_QCplots_unfiltered_additional.pdf")
pdf(paste0(dir_save, qc_plots_additional), height = 10, width = 20)
grid.arrange(plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12)
dev.off()
qc_plots_additional <- paste0(file_name, "_QCplots_unfiltered_additional.pdf")
pdf(paste0(dir_save, qc_plots_additional), height = 10, width = 20)
grid.arrange(plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12, ncol = 4)
dev.off()
# Use a loop to load Seurat objects from each BeeNetPLUS_v2 run, visualize raw QC data, filter out low quality cells and merge the filtered data into a new Seurat object.
# Create a list of all files in the "data" subdirectory
directory <- "data"
files <- list.files(directory, full.names = TRUE)
# Filter to keep only the Rdata files
rdata_files <- files[grepl("\\.Rdata$", files)]
# Loop through each Rdata file, load the Seurat object, perform filtering, and merge into a new Seurat object
for (data in rdata_files) {
# Extract the file names without extension
file_name <- tools::file_path_sans_ext(basename(data))
# Load the Seurat object and assign it a unique name using the associated .Rdata file name
load(data)
# Split the MULTI_ID column into HIVE, PID, and STIM columns. Do not remove the MULTI_ID column.
obj@meta.data <- separate(obj@meta.data, MULTI_ID, into = c("HIVE", "PID", "STIM"), sep = "-", remove = FALSE)
# Save the metadata for each run to a .csv with the same file name as the original .Rdata file
csv_file <- paste0(file_name, "_metadata.csv")
write.csv(obj@meta.data, file = file.path(dir_save, paste0(csv_file)), row.names = TRUE, quote = FALSE)
# Visualize basic unfiltered QC metrics
plot1 <- VlnPlot(obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3, pt.size = 0)
plot2 <- ggplot(obj@meta.data, aes(x = nCount_RNA)) +
geom_histogram(bins = 100)
plot3 <- ggplotGrob(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "percent.mito"))
plot4 <- ggplotGrob(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA"))
vln_plots <- paste0(file_name, "_QCplots_vln_unfiltered.pdf")
pdf(paste0(dir_save, vln_plots), height = 5, width = 15)
print(plot1)
dev.off()
qc_plots <- paste0(file_name, "_QCplots_unfiltered.pdf")
pdf(paste0(dir_save, qc_plots), height = 5, width = 15)
grid.arrange(plot2, plot3, plot4,
ncol = 3)
dev.off()
# Plot additional unfiltered QC metrics to assess sequencing depth
# Plot total reads vs nCount_RNA #######################################################################################################
plot5 <- ggplot(obj@meta.data, aes(x = reads.Total, y = nCount_RNA)) +
geom_point(aes(color = SampleName)) +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "",
x = "Total reads",
y = "nCount")
totalvcount_plot <- paste0(file_name, "_QCplots_TotalReadsVsCounts_unfiltered.pdf")
pdf(paste0(dir_save, totalvcount_plot), height = 5, width = 5)
print(plot5)
dev.off()
# Plot exon reads vs nCount_RNA
plot6 <- ggplot(obj@meta.data, aes(x = ExonReads, y = nCount_RNA)) +
geom_point(aes(color = SampleName)) +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "",
x = "Exon reads",
y = "nCount")
exonvcount_plot <- paste0(file_name, "_QCplots_ExonReadsVsCounts_unfiltered.pdf")
pdf(paste0(dir_save, exonvcount_plot), height = 5, width = 5)
print(plot6)
dev.off()
# Plot exon complexity (ExonReads/nCount_RNA)
plot7 <- ggplot(obj@meta.data, aes(x = orig.ident, y = Complexity, fill = orig.ident)) +
geom_violin(trim = F) +
stat_summary(fun=median, geom="crossbar", width=0.5,
color="black", linetype="solid") +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Complexity",
x = "",
y = "Exon reads / nCount") +
scale_y_continuous(limits = c(0, 5), breaks = seq(0, 5, by = 0.5))
exoncomplexity_plot <- paste0(file_name, "_QCplots_ExonComplexity_unfiltered.pdf")
pdf(paste0(dir_save, exoncomplexity_plot), height = 5, width = 5)
print(plot7)
dev.off()
# Create a column "TotalComplexity" of reads.Total/nCount
obj@meta.data$TotalComplexity <- obj@meta.data$reads.Total / obj@meta.data$nCount_RNA
plot8 <- ggplot(obj@meta.data, aes(x = orig.ident, y = TotalComplexity, fill = orig.ident)) +
geom_violin(trim = F) +
stat_summary(fun=median, geom="crossbar", width=0.5,
color="black", linetype="solid") +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Complexity",
x = "",
y = "Total reads / nCount") +
facet_grid(scales = "free_y")
totalcomplexity_plot <- paste0(file_name, "_QCplots_TotalComplexity_unfiltered.pdf")
pdf(paste0(dir_save, totalcomplexity_plot), height = 5, width = 5)
print(plot8)
dev.off()
# Create a column "SeqSat" and visualize
obj@meta.data$SeqSat <- 1 - (obj@meta.data$nCount_RNA / obj@meta.data$reads.Total)
plot9 <- ggplot(obj@meta.data, aes(x = reads.Total, y = SeqSat)) +
geom_point(aes(color = orig.ident)) +
geom_smooth(se=FALSE) +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Sequencing Saturation",
x = "Total Reads",
y = "Sequencing Saturation")
seqsat_plot <- paste0(file_name, "_QCplots_SeqSaturation_unfiltered.pdf")
pdf(paste0(dir_save, seqsat_plot), height = 5, width = 5)
print(plot9)
dev.off()
plot10 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqSat, fill = orig.ident)) +
geom_violin(trim = F) +
stat_summary(fun=median, geom="crossbar", width=0.5,
color="black", linetype="solid") +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Sequencing Saturation",
x = "",
y = "Sequencing Saturation") +
scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1))
seqsatvln_plot <- paste0(file_name, "_QCplots_SeqSaturationVln_unfiltered.pdf")
pdf(paste0(dir_save, seqsatvln_plot), height = 5, width = 5)
print(plot10)
dev.off()
# Create a column "SeqDepth" of nCount/nFeature and visualize
obj@meta.data$SeqDepth <- obj@meta.data$nCount_RNA / obj@meta.data$nFeature_RNA
plot11 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqDepth, fill = orig.ident)) +
geom_boxplot(outlier.shape = NA) +
geom_point(position=position_jitter(width=0.05), size=0.5) +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Expression Level per Gene",
x = "",
y = "nCount / nFeature") +
scale_y_continuous(limits = c(0, 4), breaks = seq(0, 4, by = 0.5))
seqdepthbox_plot <- paste0(file_name, "_QCplots_SeqDepthBox_unfiltered.pdf")
pdf(paste0(dir_save, seqdepthbox_plot), height = 5, width = 5)
print(plot11)
dev.off()
plot12 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqDepth, fill = orig.ident)) +
geom_violin(trim = F) +
stat_summary(fun=median, geom="crossbar", width=0.5,
color="black", linetype="solid") +
theme_minimal() +
theme(legend.position = "none", panel.grid.minor = element_blank()) +
labs(title = "Expression Level per Gene",
x = "",
y = "nCount / nFeature") +
scale_y_continuous(limits = c(0, 4), breaks = seq(0, 4, by = 0.5))
seqdepthvln_plot <- paste0(file_name, "_QCplots_SeqDepthVln_unfiltered.pdf")
pdf(paste0(dir_save, seqdepthvln_plot), height = 5, width = 5)
print(plot12)
dev.off()
qc_plots_additional <- paste0(file_name, "_QCplots_unfiltered_additional.pdf")
pdf(paste0(dir_save, qc_plots_additional), height = 10, width = 20)
grid.arrange(plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12, ncol = 4)
dev.off()
# Filter out cells that have unique feature counts above 2500 or less than 200 and >15% mitochondrial counts
# The Seurat object "obj" produced by BeeNetPLUS_v2 contains QC metadata based on HTODemux. Cells defined as "Doublet", "Negative", or "LQ" should also be filtered out.
obj <- subset(obj, subset = SampleName != "Doublet" & SampleName != "Negative" & SampleName != "LQ")
# Now apply filters for feature counts and mitochondrial counts
obj <- subset(obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mito < 0.15)
# Assign the Seurat object with a unique name using the associated .Rdata file name
assign(paste0("obj_filtered_", file_name), obj)
}
# Get all object names in the environment
all_objects <- ls()
# Filter the object names to keep only those starting with "obj_filtered_"
filtered_objects <- all_objects[grep("^obj_filtered_", all_objects)]
# Create a list containing all Seurat objects
list_seurat <- lapply(filtered_objects, get)
# Merge all filtered Seurat objects
obj <- Merge_Seurat_List(list_seurat = list_seurat)
# Save filtered Seurat object as new .Rdata file
save(obj, file = "output/FilterMerge_Seurat_obj.Rdata")
write.csv(obj@meta.data, file = file.path(dir_save, "FilterMerge_metadata.csv"), row.names = TRUE, quote = FALSE)
# Visualize the filtered QC metrics
plot1 <- VlnPlot(obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3, pt.size = 0)
plot2 <- ggplot(obj@meta.data, aes(x = nCount_RNA)) +
geom_histogram(bins = 100)
plot3 <- ggplotGrob(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "percent.mito"))
plot4 <- ggplotGrob(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA"))
vln_plots <- paste0("QCplots_vln_FilterMerge.pdf")
pdf(paste0(dir_save, vln_plots), height = 5, width = 15)
print(plot1)
dev.off()
qc_plots <- paste0("QCplots_FilterMerge.pdf")
pdf(paste0(dir_save, qc_plots), height = 5, width = 15)
grid.arrange(plot2, plot3, plot4,
ncol = 3)
dev.off()
# Plot reads per cell for each sample
reads_per_cell <- paste0("QCplots_ReadsPerCell_FilterMerge.pdf")
pdf(paste0(dir_save, reads_per_cell), height = 15, width = 15)
ggplot(obj@meta.data, aes(x = nCount_RNA, fill = SampleName)) +
geom_histogram(bins = 30, alpha = 0.6) +
scale_x_log10() +
theme_minimal() +
labs(title = "Reads Per Cell for Each Sample",
x = "Reads per Cell (log scale)",
y = "Frequency",
fill = "Sample") +
facet_wrap(~SampleName, scales = "free_y")
dev.off()
# Plot reads per cell as smooth density line
plot5 <-
obj[[]] %>%
ggplot(aes(x = nCount_RNA + 1)) +
geom_density(color = "gray80", linetype = 2, linewidth = 1.5) +
geom_density(aes(color = SampleName)) +
scale_x_log10() +
theme_bw()
density_plot <- paste0("QCplots_density_FilterMerge.pdf")
pdf(paste0(dir_save, density_plot), height = 5, width = 15)
plot5
dev.off()
