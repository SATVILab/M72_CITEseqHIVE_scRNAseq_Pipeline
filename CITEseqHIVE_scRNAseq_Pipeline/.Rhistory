plot4 <- plot_FBID_clusters(obj, 'VISIT')
plot5 <- plot_FBID_clusters(obj, 'VISIT_group')
plot6 <- plot_FBID_clusters(obj, 'STIM')
plot7 <- plot_FBID_clusters(obj, 'VISIT_STIM')
plot8 <- plot_FBID_clusters(obj, 'VISIT_STIM_group')
plot9 <- plot_FBID_clusters(obj, 'sctype_classification')
plot10 <- plot_sctype_clusters(obj, 'feature_based_ID_letter')
pdf(paste0(dir_save, "prop_FBID_group_res.clustree.pdf"), height = 5, width = 10)
print(plot1)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_RUN_res.clustree.pdf"), height = 5, width = 10)
print(plot2)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_PID_res.clustree.pdf"), height = 5, width = 10)
print(plot3)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_VISIT_res.clustree.pdf"), height = 5, width = 10)
print(plot4)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_VISITgroup_res.clustree.pdf"), height = 5, width = 10)
print(plot5)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_STIM_res.clustree.pdf"), height = 5, width = 10)
print(plot6)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_VISITSTIM_res.clustree.pdf"), height = 5, width = 10)
print(plot7)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_VISITSTIMgroup_res.clustree.pdf"), height = 5, width = 10)
print(plot8)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_sctype_res.clustree.pdf"), height = 5, width = 10)
print(plot9)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_sctypeREVERSE_res.clustree.pdf"), height = 5, width = 10)
print(plot10)
invisible(dev.off())
#| fig-height: 10
print(plot9)
#| fig-height: 10
print(plot10)
View(obj@meta.data)
Idents(object = obj) <- "RNA_snn_res.0.6"
refined_res <- "RNA_snn_res.0.6"
# Extract top markers for each cluster
top_markers <- obj.markers %>%
group_by(cluster) %>%
#order_by(p_val_adj) %>%
#slice(1:10) %>%
slice_min(order_by = p_val_adj, n = 10) %>% # Select the top markers by adjusted p-value
summarize(
top_cluster_markers = paste(gene, collapse = "_"), # Concatenate top marker names
#.groups = "drop" # Drop grouping for a clean dataframe
)
# Identify unique genes for each cluster
# Split the concatenated `top_cluster_markers` into individual genes for all clusters
all_genes <- top_markers %>%
mutate(
genes_list = strsplit(top_cluster_markers, "_") # Create list of individual genes
) %>%
unnest(genes_list) # Expand list into rows
# Count occurrences of each gene across all clusters
gene_counts <- all_genes %>%
count(genes_list, name = "gene_occurrence")
# Filter to retain only unique genes (appearing in one cluster's `feature_based_ID`)
unique_genes <- gene_counts %>%
filter(gene_occurrence == 1) %>%
pull(genes_list) # Extract list of unique genes
# Assign unique genes to each cluster
# Filter `all_genes` to keep only unique genes
unique_markers <- all_genes %>%
filter(genes_list %in% unique_genes) %>%
group_by(cluster) %>%
summarize(
feature_based_ID = paste(genes_list, collapse = "_"), # Concatenate unique genes
.groups = "drop"
)
# Merge unique markers back to `top_markers`
top_markers <- top_markers %>%
left_join(unique_markers, by = "cluster")
# Add top markers and feature-based IDs to the Seurat metadata
obj@meta.data$top_cluster_markers <- top_markers$top_cluster_markers[match(Idents(obj), top_markers$cluster)]
obj@meta.data$feature_based_ID <- top_markers$feature_based_ID[match(Idents(obj), top_markers$cluster)]
# Assign feature_based_ID as the new identities
Idents(obj) <- obj@meta.data$feature_based_ID
# Create a mapping of each feature_based_ID to a letter based on the number of cells
feature_based_ID_counts <- table(Idents(obj))
sorted_feature_based_IDs <- names(sort(feature_based_ID_counts, decreasing = TRUE))
label_mapping <- setNames(LETTERS[1:length(sorted_feature_based_IDs)], sorted_feature_based_IDs)
# Add a new column with the letter mapping
obj@meta.data$feature_based_ID_letter <- label_mapping[as.character(Idents(obj))]
# Verify the change
head(Idents(obj))
head(obj@meta.data$feature_based_ID_letter)
View(obj@meta.data)
# Extract top markers for each cluster
top_markers <- obj.markers %>%
group_by(cluster) %>%
#order_by(p_val_adj) %>%
#slice(1:10) %>%
slice_min(order_by = p_val_adj, n = 10) %>% # Select the top markers by adjusted p-value
summarize(
top_cluster_markers = paste(gene, collapse = "_"), # Concatenate top marker names
#.groups = "drop" # Drop grouping for a clean dataframe
)
# Identify unique genes for each cluster
# Split the concatenated `top_cluster_markers` into individual genes for all clusters
all_genes <- top_markers %>%
mutate(
genes_list = strsplit(top_cluster_markers, "_") # Create list of individual genes
) %>%
unnest(genes_list) # Expand list into rows
# Count occurrences of each gene across all clusters
gene_counts <- all_genes %>%
count(genes_list, name = "gene_occurrence")
# Filter to retain only unique genes (appearing in one cluster's `feature_based_ID`)
unique_genes <- gene_counts %>%
filter(gene_occurrence == 1) %>%
pull(genes_list) # Extract list of unique genes
# Assign unique genes to each cluster
# Filter `all_genes` to keep only unique genes
unique_markers <- all_genes %>%
filter(genes_list %in% unique_genes) %>%
group_by(cluster) %>%
summarize(
feature_based_ID = paste(genes_list, collapse = "_"), # Concatenate unique genes
.groups = "drop"
)
# Merge unique markers back to `top_markers`
top_markers <- top_markers %>%
left_join(unique_markers, by = "cluster")
# Add top markers and feature-based IDs to the Seurat metadata
obj@meta.data$top_cluster_markers <- top_markers$top_cluster_markers[match(Idents(obj), top_markers$cluster)]
obj@meta.data$feature_based_ID <- top_markers$feature_based_ID[match(Idents(obj), top_markers$cluster)]
# Assign feature_based_ID as the new identities
Idents(obj) <- obj@meta.data$feature_based_ID
# Create a mapping of each feature_based_ID to a letter based on the number of cells
feature_based_ID_counts <- table(Idents(obj))
sorted_feature_based_IDs <- names(sort(feature_based_ID_counts, decreasing = TRUE))
label_mapping <- setNames(LETTERS[1:length(sorted_feature_based_IDs)], sorted_feature_based_IDs)
# Add a new column with the letter mapping
obj@meta.data$feature_based_ID_letter <- label_mapping[as.character(Idents(obj))]
# Verify the change
head(Idents(obj))
head(obj@meta.data$feature_based_ID_letter)
# Extract top markers for each cluster
top_markers <- obj.markers %>%
group_by(cluster) %>%
#order_by(p_val_adj) %>%
#slice(1:10) %>%
slice_min(order_by = p_val_adj, n = 10) %>% # Select the top markers by adjusted p-value
summarize(
top_cluster_markers = paste(gene, collapse = "_"), # Concatenate top marker names
#.groups = "drop" # Drop grouping for a clean dataframe
)
# Identify unique genes for each cluster
# Split the concatenated `top_cluster_markers` into individual genes for all clusters
all_genes <- top_markers %>%
mutate(
genes_list = strsplit(top_cluster_markers, "_") # Create list of individual genes
) %>%
unnest(genes_list) # Expand list into rows
# Count occurrences of each gene across all clusters
gene_counts <- all_genes %>%
count(genes_list, name = "gene_occurrence")
# Filter to retain only unique genes (appearing in one cluster's `feature_based_ID`)
unique_genes <- gene_counts %>%
filter(gene_occurrence == 1) %>%
pull(genes_list) # Extract list of unique genes
# Assign unique genes to each cluster
# Filter `all_genes` to keep only unique genes
unique_markers <- all_genes %>%
filter(genes_list %in% unique_genes) %>%
group_by(cluster) %>%
summarize(
feature_based_ID = paste(genes_list, collapse = "_"), # Concatenate unique genes
.groups = "drop"
)
# Merge unique markers back to `top_markers`
top_markers <- top_markers %>%
left_join(unique_markers, by = "cluster")
# Add top markers and feature-based IDs to the Seurat metadata
obj@meta.data$top_cluster_markers <- top_markers$top_cluster_markers[match(Idents(obj), top_markers$cluster)]
obj@meta.data$feature_based_ID <- top_markers$feature_based_ID[match(Idents(obj), top_markers$cluster)]
# Assign feature_based_ID as the new identities
Idents(obj) <- obj@meta.data$feature_based_ID
# Create a mapping of each feature_based_ID to a letter based on the number of cells
feature_based_ID_counts <- table(Idents(obj))
sorted_feature_based_IDs <- names(sort(feature_based_ID_counts, decreasing = TRUE))
label_mapping <- setNames(LETTERS[1:length(sorted_feature_based_IDs)], sorted_feature_based_IDs)
# Add a new column with the letter mapping
obj@meta.data$feature_based_ID_letter <- label_mapping[as.character(Idents(obj))]
# Verify the change
head(Idents(obj))
head(obj@meta.data$feature_based_ID_letter)
Idents(obj)
Idents(object = obj) <- "RNA_snn_res.0.6"
refined_res <- "RNA_snn_res.0.6"
head(Idents(obj))
obj.markers <- FindAllMarkers(obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
obj.markers %>%
group_by(cluster) %>%
dplyr::filter(avg_log2FC > 1)
write.csv(obj.markers, file = file.path(dir_save, "all_markers_snn.clustree.csv"), quote = FALSE)
# Load gene set preparation function
source("https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/gene_sets_prepare.R")
# Load cell type annotation function
source("https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/sctype_score_.R")
# DB file
#db_ <- "https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_full.xlsx";
db_ <- "data/ScTypeDB_full_MLRPedit.xlsx"
tissue <- "Immune system" # e.g. Immune system, Pancreas, Liver, Eye, Kidney, Brain, Lung, Adrenal, Heart, Intestine, Muscle, Placenta, Spleen, Stomach, Thymus
# prepare gene sets
gs_list <- gene_sets_prepare(db_, tissue)
### CHANGE Idents(obj) to obj@meta.data$seurat_clusters
# check Seurat object version (scRNA-seq matrix extracted differently in Seurat v4/v5)
seurat_package_v5 <- isFALSE('counts' %in% names(attributes(obj[["RNA"]])));
print(sprintf("Seurat object %s is used", ifelse(seurat_package_v5, "v5", "v4")))
# extract scaled scRNA-seq matrix
scRNAseqData_scaled <- if (seurat_package_v5) as.matrix(obj[["RNA"]]$scale.data) else as.matrix(obj[["RNA"]]@scale.data)
# run ScType
es.max <- sctype_score(scRNAseqData = scRNAseqData_scaled, scaled = TRUE, gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)
# merge by cluster
cL_resutls <- do.call("rbind", lapply(unique(Idents(obj)), function(cl){
es.max.cl = sort(rowSums(es.max[ ,rownames(obj@meta.data[Idents(obj)==cl, ])]), decreasing = !0)
head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(Idents(obj)==cl)), 10)
}))
sctype_scores <- cL_resutls %>% group_by(cluster) %>% top_n(n = 1, wt = scores)
# set low-confident (low ScType score) clusters to "unknown"
sctype_scores$type[as.numeric(as.character(sctype_scores$scores)) < sctype_scores$ncells/4] <- "Unknown"
print(sctype_scores)
### CHANGE Idents(obj) to obj@meta.data$seurat_clusters
obj@meta.data$sctype_classification = NA
for(j in unique(sctype_scores$cluster)){
cl_type = sctype_scores[sctype_scores$cluster==j,];
obj@meta.data$sctype_classification[Idents(obj) == j] = as.character(cl_type$type[1])
}
pdf(paste0(dir_save, "umap_annotated.pdf"), height = 7, width = 10)
umap_annotated <- DimPlot(obj, reduction = "umap", label = TRUE, repel = TRUE, group.by = 'sctype_classification')
print(umap_annotated)
invisible(dev.off())
umap_annotated
#| fig-height: 6.5
pdf(paste0(dir_save, "umap_annotated_splitgroup.pdf"), height = 7, width = 15)
umap_annotated_group <- DimPlot(obj, reduction = "umap", split.by = "group", group.by = 'sctype_classification')
print(umap_annotated_group)
invisible(dev.off())
umap_annotated_group
save(obj, file = paste0(dir_save, "Seurat_ClusterIDCells_obj_AssignedCellTypeIntermediate.Rdata"))
saveRDS(obj, file = paste0(dir_save, "Seurat_ClusterIDcells_obj_AssignedCellTypeIntermediate.rds"))
plot_sctype_clusters = function (srat, batchcolumn) {
## take an integrated Seurat object, plot distributions over sctype_classification
# Ensure the sctype_classification column is treated as a factor and handle NA values
srat@meta.data$sctype_classification <- as.factor(srat@meta.data$sctype_classification)
srat@meta.data <- srat@meta.data[!is.na(srat@meta.data$sctype_classification), ]
# Ensure the batchcolumn is treated as a factor
srat@meta.data[[batchcolumn]] <- as.factor(srat@meta.data[[batchcolumn]])
# Check lengths of the columns
if (length(srat@meta.data$sctype_classification) != length(srat@meta.data[[batchcolumn]])) {
stop("The lengths of feature_based_ID and the batch column do not match.")
}
count_table <- table(srat@meta.data$sctype_classification, srat@meta.data[[batchcolumn]])
count_mtx   <- as.data.frame.matrix(count_table)
count_mtx$cluster <- rownames(count_mtx)
melt_mtx    <- melt(count_mtx)
melt_mtx$cluster <- as.factor(melt_mtx$cluster)
# Calculate the total number of cells per cluster and sort by size in descending order
cluster_size   <- aggregate(value ~ cluster, data = melt_mtx, FUN = sum)
sorted_labels <- cluster_size$cluster[order(cluster_size$value, decreasing = F)]
cluster_size$cluster <- factor(cluster_size$cluster, levels = sorted_labels)
melt_mtx$cluster <- factor(melt_mtx$cluster, levels = sorted_labels)
colnames(melt_mtx)[2] <- "dataset"
p1 <- ggplot(cluster_size, aes(y = cluster, x = value)) +
geom_bar(position = "dodge", stat = "identity", fill = "grey60") +
geom_text(aes(label = value), hjust = 1.5, size = 3) +
theme_bw() + scale_x_log10() +
xlab("Cells per cluster, log10 scale") + ylab("")
p2 <- ggplot(melt_mtx, aes(x = cluster, y = value, fill = dataset)) +
geom_bar(position = "fill", stat = "identity") + theme_bw() + coord_flip() +
ylab("Fraction of cells in each dataset") + xlab("Cluster") + theme(legend.position = "bottom") +
guides(color = guide_legend(ncol = 3, override.aes = list(size = 5)))
p2 / p1 + plot_layout(widths = c(3,3))
}
plot1 <- plot_sctype_clusters(obj, 'group')
plot2 <- plot_sctype_clusters(obj, 'RUN')
plot3 <- plot_sctype_clusters(obj, 'PID')
plot4 <- plot_sctype_clusters(obj, 'VISIT')
plot5 <- plot_sctype_clusters(obj, 'VISIT_group')
plot6 <- plot_sctype_clusters(obj, 'STIM')
plot7 <- plot_sctype_clusters(obj, 'VISIT_STIM')
plot8 <- plot_sctype_clusters(obj, 'VISIT_STIM_group')
pdf(paste0(dir_save, "prop_sctype_group_res.clustree.pdf"), height = 5, width = 10)
print(plot1)
invisible(dev.off())
pdf(paste0(dir_save, "prop_sctype_RUN_res.clustree.pdf"), height = 5, width = 10)
print(plot2)
invisible(dev.off())
pdf(paste0(dir_save, "prop_sctype_PID_res.clustree.pdf"), height = 5, width = 10)
print(plot3)
invisible(dev.off())
pdf(paste0(dir_save, "prop_sctype_VISIT_res.clustree.pdf"), height = 5, width = 10)
print(plot4)
invisible(dev.off())
pdf(paste0(dir_save, "prop_sctype_VISITgroup_res.clustree.pdf"), height = 5, width = 10)
print(plot5)
invisible(dev.off())
pdf(paste0(dir_save, "prop_sctype_STIM_res.clustree.pdf"), height = 5, width = 10)
print(plot6)
invisible(dev.off())
pdf(paste0(dir_save, "prop_sctype_VISITSTIM_res.clustree.pdf"), height = 5, width = 10)
print(plot7)
invisible(dev.off())
pdf(paste0(dir_save, "prop_sctype_VISITSTIMgroup_res.clustree.pdf"), height = 5, width = 10)
print(plot8)
invisible(dev.off())
# Extract top markers for each cluster
top_markers <- obj.markers %>%
group_by(cluster) %>%
#order_by(p_val_adj) %>%
#slice(1:10) %>%
slice_min(order_by = p_val_adj, n = 10) %>% # Select the top markers by adjusted p-value
summarize(
top_cluster_markers = paste(gene, collapse = "_"), # Concatenate top marker names
#.groups = "drop" # Drop grouping for a clean dataframe
)
# Identify unique genes for each cluster
# Split the concatenated `top_cluster_markers` into individual genes for all clusters
all_genes <- top_markers %>%
mutate(
genes_list = strsplit(top_cluster_markers, "_") # Create list of individual genes
) %>%
unnest(genes_list) # Expand list into rows
# Count occurrences of each gene across all clusters
gene_counts <- all_genes %>%
count(genes_list, name = "gene_occurrence")
# Filter to retain only unique genes (appearing in one cluster's `feature_based_ID`)
unique_genes <- gene_counts %>%
filter(gene_occurrence == 1) %>%
pull(genes_list) # Extract list of unique genes
# Assign unique genes to each cluster
# Filter `all_genes` to keep only unique genes
unique_markers <- all_genes %>%
filter(genes_list %in% unique_genes) %>%
group_by(cluster) %>%
summarize(
feature_based_ID = paste(genes_list, collapse = "_"), # Concatenate unique genes
.groups = "drop"
)
# Merge unique markers back to `top_markers`
top_markers <- top_markers %>%
left_join(unique_markers, by = "cluster")
# Add top markers and feature-based IDs to the Seurat metadata
obj@meta.data$top_cluster_markers <- top_markers$top_cluster_markers[match(Idents(obj), top_markers$cluster)]
obj@meta.data$feature_based_ID <- top_markers$feature_based_ID[match(Idents(obj), top_markers$cluster)]
# Assign feature_based_ID as the new identities
Idents(obj) <- obj@meta.data$feature_based_ID
# Create a mapping of each feature_based_ID to a letter based on the number of cells
feature_based_ID_counts <- table(Idents(obj))
sorted_feature_based_IDs <- names(sort(feature_based_ID_counts, decreasing = TRUE))
label_mapping <- setNames(LETTERS[1:length(sorted_feature_based_IDs)], sorted_feature_based_IDs)
# Add a new column with the letter mapping
obj@meta.data$feature_based_ID_letter <- label_mapping[as.character(Idents(obj))]
# Verify the change
head(Idents(obj))
head(obj@meta.data$feature_based_ID_letter)
plot1 <- DimPlot(obj, reduction = "umap", group.by = c("feature_based_ID"), split.by = "group") +
theme(legend.position = "bottom", legend.text = element_text(size = 7)) +
guides(color = guide_legend(ncol = 1, override.aes = list(size = 5)))
plot2 <- DimPlot(obj, reduction = "umap", group.by = c("RUN"), split.by = "group") +
theme(legend.position = "bottom", legend.text = element_text(size = 7)) +
guides(color = guide_legend(ncol = 5, override.aes = list(size = 5)))
plot3 <- DimPlot(obj, reduction = "umap", group.by = c("PID"), split.by = "group") +
theme(legend.position = "bottom", legend.text = element_text(size = 7)) +
guides(color = guide_legend(ncol = 7, override.aes = list(size = 5)))
plot4 <- DimPlot(obj, reduction = "umap", group.by = c("VISIT"), split.by = "group") +
theme(legend.position = "bottom", legend.text = element_text(size = 7)) +
guides(color = guide_legend(ncol = 2, override.aes = list(size = 5)))
plot5 <- DimPlot(obj, reduction = "umap", group.by = c("VISIT_group")) +
theme(legend.position = "bottom", legend.text = element_text(size = 7)) +
guides(color = guide_legend(ncol = 4, override.aes = list(size = 5)))
plot6 <- DimPlot(obj, reduction = "umap", group.by = c("STIM")) +
theme(legend.position = "bottom", legend.text = element_text(size = 7)) +
guides(color = guide_legend(ncol = 4, override.aes = list(size = 5)))
plot7 <- DimPlot(obj, reduction = "umap", group.by = c("VISIT_STIM")) +
theme(legend.position = "bottom", legend.text = element_text(size = 7)) +
guides(color = guide_legend(ncol = 4, override.aes = list(size = 5)))
plot8 <- DimPlot(obj, reduction = "umap", group.by = c("VISIT_STIM_group")) +
theme(legend.position = "bottom", legend.text = element_text(size = 7)) +
guides(color = guide_legend(ncol = 4, override.aes = list(size = 5)))
plot9 <- DimPlot(obj, reduction = "umap", group.by = c("sctype_classification")) +
theme(legend.position = "bottom", legend.text = element_text(size = 7)) +
guides(color = guide_legend(ncol = 4, override.aes = list(size = 5)))
plot10 <- DimPlot(obj, reduction = "umap", group.by = c("feature_based_ID")) +
theme(legend.position = "bottom", legend.text = element_text(size = 7)) +
guides(color = guide_legend(ncol = 1, override.aes = list(size = 5)))
pdf(paste0(dir_save, "umap_FBID_group_res.clustree.pdf"), height = 7.5, width = 11)
print(plot1)
invisible(dev.off())
pdf(paste0(dir_save, "umap_FBID_RUN_res.clustree.pdf"), height = 5, width = 10)
print(plot2)
invisible(dev.off())
pdf(paste0(dir_save, "umap_FBID_PID_res.clustree.pdf"), height = 5, width = 10)
print(plot3)
invisible(dev.off())
pdf(paste0(dir_save, "umap_FBID_VISIT_res.clustree.pdf"), height = 5, width = 10)
print(plot4)
invisible(dev.off())
pdf(paste0(dir_save, "umap_FBID_VISITgroup_res.clustree.pdf"), height = 5, width = 10)
print(plot5)
invisible(dev.off())
pdf(paste0(dir_save, "umap_FBID_STIM_res.clustree.pdf"), height = 5, width = 10)
print(plot6)
invisible(dev.off())
pdf(paste0(dir_save, "umap_FBID_VISITSTIM_res.clustree.pdf"), height = 5, width = 10)
print(plot7)
invisible(dev.off())
pdf(paste0(dir_save, "umap_FBID_VISITSTIMgroup_res.clustree.pdf"), height = 5, width = 10)
print(plot8)
invisible(dev.off())
pdf(paste0(dir_save, "umap_FBID_sctype_res.clustree.pdf"), height = 5, width = 10)
print(plot9)
invisible(dev.off())
pdf(paste0(dir_save, "umap_FBID_refinedclusters_res.clustree.pdf"), height = 7.5, width = 11)
print(plot10)
invisible(dev.off())
#| fig-height: 30
print(plot9 / plot10)
plot_FBID_clusters = function (srat, batchcolumn) {
## take an integrated Seurat object, plot distributions over feature_based_ID
# Ensure the feature_based_ID column is treated as a factor and handle NA values
srat@meta.data$feature_based_ID_letter <- as.factor(srat@meta.data$feature_based_ID_letter)
srat@meta.data <- srat@meta.data[!is.na(srat@meta.data$feature_based_ID_letter), ]
# Ensure the batchcolumn is treated as a factor
srat@meta.data[[batchcolumn]] <- as.factor(srat@meta.data[[batchcolumn]])
# Check lengths of the columns
if (length(srat@meta.data$feature_based_ID_letter) != length(srat@meta.data[[batchcolumn]])) {
stop("The lengths of feature_based_ID_letter and the batch column do not match.")
}
count_table <- table(srat@meta.data$feature_based_ID_letter, srat@meta.data[[batchcolumn]])
count_mtx   <- as.data.frame.matrix(count_table)
count_mtx$cluster <- rownames(count_mtx)
melt_mtx    <- melt(count_mtx)
melt_mtx$cluster <- as.factor(melt_mtx$cluster)
# Calculate the total number of cells per cluster and sort by size in descending order
cluster_size   <- aggregate(value ~ cluster, data = melt_mtx, FUN = sum)
sorted_labels <- cluster_size$cluster[order(cluster_size$value, decreasing = F)]
cluster_size$cluster <- factor(cluster_size$cluster, levels = sorted_labels)
melt_mtx$cluster <- factor(melt_mtx$cluster, levels = sorted_labels)
colnames(melt_mtx)[2] <- "dataset"
p1 <- ggplot(cluster_size, aes(y = cluster, x = value)) +
geom_bar(position = "dodge", stat = "identity", fill = "grey60") +
geom_text(aes(label = value), hjust = 1.5, size = 3) +
theme_bw() + scale_x_log10() +
xlab("Cells per cluster, log10 scale") + ylab("")
p2 <- ggplot(melt_mtx, aes(x = cluster, y = value, fill = dataset)) +
geom_bar(position = "fill", stat = "identity") + theme_bw() + coord_flip() +
ylab("Fraction of cells in each dataset") + xlab("Cluster") + theme(legend.position = "left")
# Create a legend as a text grob using the existing feature_based_ID_letter column
legend_text <- paste(label_mapping, names(label_mapping), sep = ": ", collapse = "\n")
legend_grob <- textGrob(legend_text, x = unit(0, "npc"), y = unit(1, "npc"), just = c("left", "top"), gp = gpar(fontsize = 7))
# Combine the plots in a grid format with 3:2 width ratio for p2 and p1
combined_plot <- (p2 + p1 + plot_layout(widths = c(3, 2))) / wrap_elements(legend_grob) + plot_layout(heights = c(2, 1))
combined_plot
}
plot1 <- plot_FBID_clusters(obj, 'group')
plot2 <- plot_FBID_clusters(obj, 'RUN')
plot3 <- plot_FBID_clusters(obj, 'PID')
plot4 <- plot_FBID_clusters(obj, 'VISIT')
plot5 <- plot_FBID_clusters(obj, 'VISIT_group')
plot6 <- plot_FBID_clusters(obj, 'STIM')
plot7 <- plot_FBID_clusters(obj, 'VISIT_STIM')
plot8 <- plot_FBID_clusters(obj, 'VISIT_STIM_group')
plot9 <- plot_FBID_clusters(obj, 'sctype_classification')
plot10 <- plot_sctype_clusters(obj, 'feature_based_ID_letter')
pdf(paste0(dir_save, "prop_FBID_group_res.clustree.pdf"), height = 5, width = 10)
print(plot1)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_RUN_res.clustree.pdf"), height = 5, width = 10)
print(plot2)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_PID_res.clustree.pdf"), height = 5, width = 10)
print(plot3)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_VISIT_res.clustree.pdf"), height = 5, width = 10)
print(plot4)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_VISITgroup_res.clustree.pdf"), height = 5, width = 10)
print(plot5)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_STIM_res.clustree.pdf"), height = 5, width = 10)
print(plot6)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_VISITSTIM_res.clustree.pdf"), height = 5, width = 10)
print(plot7)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_VISITSTIMgroup_res.clustree.pdf"), height = 5, width = 10)
print(plot8)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_sctype_res.clustree.pdf"), height = 5, width = 10)
print(plot9)
invisible(dev.off())
pdf(paste0(dir_save, "prop_FBID_sctypeREVERSE_res.clustree.pdf"), height = 5, width = 10)
print(plot10)
invisible(dev.off())
#| fig-height: 10
print(plot9)
#| fig-height: 10
print(plot10)
quarto quarto_render
quarto::quarto_render
# latest release version
install.packages("quarto")
