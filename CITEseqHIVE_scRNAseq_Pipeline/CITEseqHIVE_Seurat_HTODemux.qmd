---
title: "TestScript_Experiment4_MLmodified_COMBINED"
format: html
editor: visual
---

## Description

This script takes the output of CITEseqHIVE_Seurat_FilterMergeQC.qmd as input. Each Assay ("RNA", and "ADT") will be processed individually first, and then integrated using Weighted Nearest Neighbors (WNN) for combined analysis. Analysis in this script includes normalization and scaling, clustering, and cell type identification.

### Clear console

```{r, output=FALSE}
ls()
rm(list=ls())
```

### Set output directory

```{r}
dir_save <- "output/"
```

### Load libraries

```{r, message=FALSE}
# CHECK THIS CONTAINS ONLY NECESSARY LIBRARIES
library(SingleCellExperiment)
library(Seurat)
library(SeuratObject)
library(dplyr)
library(clustree)
library(ggpubr)
library(patchwork)
library(reshape2)
library(RColorBrewer)
library(magrittr)
library(HGNChelper)
library(openxlsx)
library(multtest)
library(metap)
library(ggplot2)
library(cowplot)
library(readxl)
library(devtools)
#library(presto)
library(kableExtra)
```

### Load the filtered .Rdata file generated by CITEseqHIVE_Seurat_FilterMergeQC.qmd

```{r}
load("output/Seurat_FilterMerge_obj.Rdata")
obj

# Confirm Seruat object contains assays for RNA and ADT
Assays(obj)
```

### Load Seurat objects and perform initial QC and filtering

```{r, warning=FALSE, message=FALSE, output=FALSE}
# Use a loop to load Seurat objects from each BeeNetPLUS_v2 run, visualize raw QC data, filter out low quality cells and merge the filtered data into a new Seurat object.

# Create a list of all files in the "data" subdirectory
directory <- "data"
files <- list.files(directory, full.names = TRUE)

# Filter to keep only the Rdata files
rdata_files <- files[grepl("\\.Rdata$", files)]

# Loop through each Rdata file, load the Seurat object, perform filtering, and merge into a new Seurat object
for (data in rdata_files) {
  # Extract the file names without extension 
  file_name <- tools::file_path_sans_ext(basename(data))
  
  # Load the Seurat object and assign it a unique name using the associated .Rdata file name
  load(data)
  
  # Split the MULTI_ID column into HIVE, PID, and STIM columns. Do not remove the MULTI_ID column. 
  obj@meta.data <- separate(obj@meta.data, MULTI_ID, into = c("RUN", "PLATE", "HIVE", "PID", "VISIT", "STIM"), sep = "-", remove = FALSE)
  
  # Save the metadata for each run to a .csv with the same file name as the original .Rdata file
  csv_file <- paste0(file_name, "_metadata.csv")
  write.csv(obj@meta.data, file = file.path(dir_save, paste0(csv_file)), row.names = TRUE, quote = FALSE)
  
  # Plot HTO QC metrics
  
  obj <- NormalizeData(obj, assay = "HTO", normalization.method = "CLR")
  
  Idents(obj) <- "MULTI_ID"
  
  HTO_ridge <- RidgePlot(obj, assay = "HTO", features = rownames(obj[["HTO"]]) [1:2], ncol = 1)
    
}
```

```{r}
install.packages("readr")
# Load the installed Package
library(readr)

hto <- readr::read_tsv("/Users/monikalooney/Downloads/HIVE002_HTOList_20240712065822_CALL.tsv")
rna <- readr::read_tsv("/Users/monikalooney/Downloads/HIVE002_20240712073731_TCM.tsv")

joint.bcs <- intersect(colnames(rna), colnames(hto))

rna <- rna[, joint.bcs]
hto <- hto %>% 
  column_to_rownames(var = "CellBC")
hto <- as.matrix(hto[, joint.bcs])

rownames(hto)

# Simplify rownames
modify_rownames <- function(rownames) {
  sapply(rownames, function(x) {
    parts <- unlist(strsplit(x, "_"))
    paste(parts[4:length(parts)], collapse = "-")
  })
}

# Apply the function to the row names
new_rownames <- modify_rownames(rownames(hto))
rownames(hto) <- new_rownames
rownames(hto)


obj <- CreateSeuratObject(counts = Matrix::Matrix(as.matrix(rna), sparse = T))
obj <- NormalizeData(obj)
obj <- FindVariableFeatures(obj, seelction.method = "mean.var.plot")
obj <- ScaleData(obj, features = VariableFeatures(obj))

obj[["HTO"]] <- CreateAssayObject(counts = hto)
obj <- NormalizeData(obj, assay = "HTO", normalization.method = "CLR")

#obj <- HTODemux(obj, assay = "HTO", positive.quantile = 0.99)
obj <- MULTIseqDemux(obj, assay = "HTO", quantile = 0.7, autoThresh = TRUE)

#table(obj$HTO_classification.global)

#Idents(obj) <- "HTO_maxID"
Idents(obj) <- "MULTI_ID"

# Generate individual RidgePlots and assign them to objects
plot1 <- RidgePlot(obj, assay = "HTO", features = rownames(obj[["HTO"]])[1]) + 
  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())

plot2 <- RidgePlot(obj, assay = "HTO", features = rownames(obj[["HTO"]])[2]) + 
  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())

plot3 <- RidgePlot(obj, assay = "HTO", features = rownames(obj[["HTO"]])[3]) + 
  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())

plot4 <- RidgePlot(obj, assay = "HTO", features = rownames(obj[["HTO"]])[4]) + 
  theme(axis.text.y = element_blank(), axis.ticks.y = element_blank())

combined_plot <- wrap_plots(list(plot1, plot2, plot3, plot4), ncol = 2) +
  plot_layout(guides = 'collect') &  # Collect legends and apply theme to all plots
  theme(legend.position = "bottom") # Place the legend on the top

# Print the combined plot
print(combined_plot)
  
```

