---
title: "CITEseq-HIVE Seurat Filter, Merge, and QC"
format:
  html:
      code-fold: true
editor: visual
---

### Description

This pipeline can be used to examine quality control (QC) metrics and filter out poor-quality cells from scRNAseq datasets generated by CITEseq-HIVE. This script uses the unfiltered Seruat object "obj" output by BeeNetPLUS_v2 as input. obj is contained within a .zip .Rdata file found under the following relative path after running BeeNetPLUS_v2 Analysis\_\[run-ID\]/\[experiment\]\_Report.zip. This .Rdata file should be downloaded into a subdirectory called "data" nested in your working directory. You will also need a subdirectory called "output/" to store results.

### Clear console

```{r, output=FALSE}
ls()
rm(list=ls())
```

### Set output directory

```{r}
dir_save <- "output/"
```

### Load libraries

```{r, message = FALSE, warning = FALSE}
library(SingleCellExperiment)
library(Seurat)
library(SeuratObject)
library(scCustomize)
library(tidyr)
library(dplyr)
library(clustree)
library(ggpubr)
library(patchwork)
library(magrittr)
library(HGNChelper)
library(openxlsx)
library(multtest)
library(metap)
library(ggplot2)
library(gridExtra)
library(cowplot)
library(DT)
```

### Load Seurat objects and perform initial QC and filtering

The Seurat object "obj" from the .Rdata file associated with each CITEseq-HIVE run stored in the "data" subdirectory will be loaded automatically based on the .Rdata extension. Make sure that the only .Rdata files contained in the "data" subdirectory are for sequenced CITEseq-HIVE plates that have been processed via the Terra BeeNetPLUS_v2 workflow. There should be one .Rdata file for each CITEseq-HIVE run with the file name structure M72RUN###\_M72CSH###\_unfiltered.Rdata.

Each individual run will be examined for various QC metrics. Examine QC outputs and use to inform filtering thresholds. Filtering thresholds can be adjusted manually by editing the following line of code in the code cell below: obj \<- subset(obj, subset = nFeature_RNA \> 200 & nFeature_RNA \< 7500 & percent_mito \< 0.15)

Current thresholds:

1.  nFeature_RNA \> 200 (Number of RNA features must be greater than 200 per cell)

2.  nFeature_RNA \< 2500 (Number of RNA features must be less than 2500 per cell)

3.  percent_mito \< 0.15 (Percent of mitochondrial reads must be less than 15% per cell)

This loop will also iterate through each plate and plot per-plate QC metrics in individual tabs.

```{r, message = FALSE, warning = FALSE, output = FALSE}
# Function to create combined plots for a Seurat object
create_combined_plot <- function(obj) {
  # Visualize basic unfiltered QC metrics
  plot1 <- VlnPlot(obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 3, pt.size = 0)
  plot2 <- ggplot(obj@meta.data, aes(x = nCount_RNA)) +
           geom_histogram(bins = 100)
  plot3 <- ggplotGrob(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "percent.mito"))
  plot4 <- ggplotGrob(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA"))
  
  vln_plots <- paste0(file_name, "_QCplots_vln_unfiltered.pdf")
  pdf(paste0(dir_save, vln_plots), height = 5, width = 15)
  print(plot1)
  invisible(dev.off())
  
  qc_plots <- paste0(file_name, "_QCplots_unfiltered.pdf")
  pdf(paste0(dir_save, qc_plots), height = 5, width = 15)
  grid.arrange(plot2, plot3, plot4,
               ncol = 3)
  invisible(dev.off())
  
  # Plot additional unfiltered QC metrics to assess sequencing depth
  # Plot total reads vs nCount_RNA 
  plot5 <- ggplot(obj@meta.data, aes(x = reads.Total, y = nCount_RNA)) +
    geom_point(aes(color = SampleName)) +
    theme_minimal() +
    theme(legend.position = "none", panel.grid.minor = element_blank()) +
    labs(title = "",
         x = "Total reads",
         y = "nCount")
  totalvcount_plot <- paste0(file_name, "_QCplots_TotalReadsVsCounts_unfiltered.pdf")
  pdf(paste0(dir_save, totalvcount_plot), height = 5, width = 5)
  print(plot5)
  invisible(dev.off())
  
  # Plot exon reads vs nCount_RNA
  plot6 <- ggplot(obj@meta.data, aes(x = ExonReads, y = nCount_RNA)) +
    geom_point(aes(color = SampleName)) +
    theme_minimal() +
    theme(legend.position = "none", panel.grid.minor = element_blank()) +
    labs(title = "",
         x = "Exon reads",
         y = "nCount")
  exonvcount_plot <- paste0(file_name, "_QCplots_ExonReadsVsCounts_unfiltered.pdf")
  pdf(paste0(dir_save, exonvcount_plot), height = 5, width = 5)
  print(plot6)
  invisible(dev.off())
  
  # Plot exon complexity (ExonReads/nCount_RNA)
  plot7 <- ggplot(obj@meta.data, aes(x = orig.ident, y = Complexity, fill = orig.ident)) +
    geom_violin(trim = F) +
    stat_summary(fun=median, geom="crossbar", width=0.5, 
                 color="black", linetype="solid") +
    theme_minimal() +
    theme(legend.position = "none", panel.grid.minor = element_blank()) +
    labs(title = "Complexity",
         x = "",
         y = "Exon reads / nCount") +
    scale_y_continuous(limits = c(0, 5), breaks = seq(0, 5, by = 0.5))
  exoncomplexity_plot <- paste0(file_name, "_QCplots_ExonComplexity_unfiltered.pdf")
  pdf(paste0(dir_save, exoncomplexity_plot), height = 5, width = 5)
  print(plot7)
  invisible(dev.off())
  
  # Plot total complexity (reads.Total/nCount)
  plot8 <- ggplot(obj@meta.data, aes(x = orig.ident, y = TotalComplexity, fill = orig.ident)) +
    geom_violin(trim = F) +
    stat_summary(fun=median, geom="crossbar", width=0.5, 
                 color="black", linetype="solid") +
    theme_minimal() +
    theme(legend.position = "none", panel.grid.minor = element_blank()) +
    labs(title = "Complexity",
         x = "",
         y = "Total reads / nCount") +
    facet_grid(scales = "free_y")
  totalcomplexity_plot <- paste0(file_name, "_QCplots_TotalComplexity_unfiltered.pdf")
  pdf(paste0(dir_save, totalcomplexity_plot), height = 5, width = 5)
  print(plot8)
  invisible(dev.off())
  
  # Create a column "SeqSat" and visualize
  plot9 <- ggplot(obj@meta.data, aes(x = reads.Total, y = SeqSat)) +
    geom_point(aes(color = orig.ident)) +
    geom_smooth(se=FALSE) +
    theme_minimal() +
    theme(legend.position = "none", panel.grid.minor = element_blank()) +
    labs(title = "Sequencing Saturation",
         x = "Total Reads",
         y = "Sequencing Saturation")
  seqsat_plot <- paste0(file_name, "_QCplots_SeqSaturation_unfiltered.pdf")
  pdf(paste0(dir_save, seqsat_plot), height = 5, width = 5)
  print(plot9)
  invisible(dev.off())
  
  plot10 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqSat, fill = orig.ident)) +
    geom_violin(trim = F) +
    stat_summary(fun=median, geom="crossbar", width=0.5, 
                 color="black", linetype="solid") +
    theme_minimal() +
    theme(legend.position = "none", panel.grid.minor = element_blank()) +
    labs(title = "Sequencing Saturation",
         x = "",
         y = "Sequencing Saturation") +
    scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1))
  seqsatvln_plot <- paste0(file_name, "_QCplots_SeqSaturationVln_unfiltered.pdf")
  pdf(paste0(dir_save, seqsatvln_plot), height = 5, width = 5)
  print(plot10)
  invisible(dev.off())
  
  # Create a column "SeqDepth" of nCount/nFeature and visualize
  plot11 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqDepth, fill = orig.ident)) +
    geom_boxplot(outlier.shape = NA) +
    geom_point(position=position_jitter(width=0.05), size=0.5) +
    theme_minimal() +
    theme(legend.position = "none", panel.grid.minor = element_blank()) +
    labs(title = "Expression Level per Gene",
         x = "",
         y = "nCount / nFeature") +
    facet_grid(scales = "free_y")
  seqdepthbox_plot <- paste0(file_name, "_QCplots_SeqDepthBox_unfiltered.pdf")
  pdf(paste0(dir_save, seqdepthbox_plot), height = 5, width = 5)
  print(plot11)
  invisible(dev.off())

  plot12 <- ggplot(obj@meta.data, aes(x = orig.ident, y = SeqDepth, fill = orig.ident)) +
    geom_violin(trim = F) +
    stat_summary(fun=median, geom="crossbar", width=0.5, 
                 color="black", linetype="solid") +
    theme_minimal() +
    theme(legend.position = "none", panel.grid.minor = element_blank()) +
    labs(title = "Expression Level per Gene",
         x = "",
         y = "nCount / nFeature") +
    facet_grid(scales = "free_y")
  seqdepthvln_plot <- paste0(file_name, "_QCplots_SeqDepthVln_unfiltered.pdf")
  pdf(paste0(dir_save, seqdepthvln_plot), height = 5, width = 5)
  print(plot12)
  invisible(dev.off())
  
  qc_plots_additional <- paste0(file_name, "_QCplots_unfiltered_additional.pdf")
  pdf(paste0(dir_save, qc_plots_additional), height = 10, width = 20)
  grid.arrange(plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12, ncol = 4)
  invisible(dev.off())
  
  # Combine plots into a single plot
  combined_plot <- plot_grid(plot1, grid.arrange(plot2, ncol = 1), grid.arrange(plot3, plot4, ncol = 2), plot5 | plot6, plot7 | plot8, plot9 | plot10, plot11 | plot12, ncol = 1)
  
}

# Use a loop to load Seurat objects from each BeeNetPLUS_v2 run, visualize raw QC data, filter out low quality cells and merge the filtered data into a new Seurat object.

# List to store all combined plots
combined_plots_list <- list()

# Create a list of all files in the "data" subdirectory
directory <- "data"
files <- list.files(directory, full.names = TRUE)

# Filter to keep only the Rdata files
rdata_files <- files[grepl("\\.Rdata$", files)]

# Loop through each Rdata file, load the Seurat object, perform filtering, and merge into a new Seurat object
for (data in rdata_files) {
  # Extract the file names without extension 
  file_name <- tools::file_path_sans_ext(basename(data))
  
  # Load the Seurat object and assign it a unique name using the associated .Rdata file name
  load(data)
  
  # Create new columns with additional calculations
  obj@meta.data$TotalComplexity <- obj@meta.data$reads.Total / obj@meta.data$nCount_RNA
  obj@meta.data$SeqSat <- 1 - (obj@meta.data$nCount_RNA / obj@meta.data$reads.Total)
  obj@meta.data$SeqDepth <- obj@meta.data$nCount_RNA / obj@meta.data$nFeature_RNA
  
  # Split the MULTI_ID column into HIVE, PID, and STIM columns. Do not remove the MULTI_ID column. 
  obj@meta.data <- separate(obj@meta.data, MULTI_ID, into = c("RUN", "PLATE", "HIVE", "PID", "VISIT", "STIM"), sep = "-", remove = FALSE)
  
  # Create column with merged VISIT, STIM, and group information
  obj@meta.data$VISIT_STIM <- paste(obj@meta.data$VISIT, obj@meta.data$STIM, sep = " ")
  obj@meta.data$VISIT_STIM_group <- paste(obj@meta.data$VISIT, obj@meta.data$STIM, obj@meta.data$group, sep = " ")

  # Save the metadata for each run to a .csv with the same file name as the original .Rdata file
  csv_file <- paste0(file_name, "_metadata.csv")
  write.csv(obj@meta.data, file = file.path(dir_save, paste0(csv_file)), row.names = TRUE, quote = FALSE)
  
  # Create combined plot for unfiltered QC metrics
  combined_plot <- create_combined_plot(obj)

  # Assign the combined plot to a variable with a dynamic name
  assign(paste0("QCplots_", file_name), combined_plot)

  # Add the combined plot to the list
  combined_plots_list[[file_name]] <- combined_plot

  # The Seurat object "obj" produced by BeeNetPLUS_v2 contains QC metadata based on MULTIseqDemux. Cells defined as "Doublet", "Negative", or "LQ" should be filtered out. 
  obj <- subset(obj, subset = SampleName != "Doublet" & SampleName != "Negative" & SampleName != "LQ")

  # Filter out cells that have unique feature counts above 2500 or less than 200 and >15% mitochondrial counts
  obj <- subset(obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mito < 0.15)
  
  # Assign the Seurat object with a unique name using the associated .Rdata file name
  assign(paste0("obj_filtered_", file_name), obj)
    
}
```

::: panel-tabset
```{r}
#| fig-height: 32.5
#| results: asis
library(glue)

# Generate the tabset in Quarto
for (file_name in names(combined_plots_list)) {
  cat(glue("## {file_name} \n\n"))
  print(combined_plots_list[[file_name]])
  cat("\n\n")
}
```
:::

# Merge all filtered Seurat objects

Now that all individual runs have been QC'd and filtered. High quality cells from all runs will be merged into a single Seurat object for further downstream processing and analysis.

```{r}
# Get all object names in the environment
all_objects <- ls()

# Filter the object names to keep only those starting with "obj_filtered_"
filtered_objects <- all_objects[grep("^obj_filtered_", all_objects)]

# Create a list containing all Seurat objects
list_seurat <- lapply(filtered_objects, get)

### REMOVE INDIVIDUAL SERUAT OBJS

# Merge all filtered Seurat objects
obj <- Merge_Seurat_List(list_seurat = list_seurat)
```

# Export filtered and merged metadata

All metadata from the filtered and merged dataset will be exported to a .csv file. A snapshot of the first few cells is shown below.

```{r, warning = FALSE}
write.csv(obj@meta.data, file = file.path(dir_save, "FilterMerge_metadata.csv"), row.names = TRUE, quote = FALSE)

datatable(head(obj@meta.data), class = 'cell-border stripe')
```

# Visualize filtered QC metrics

Visualize QC metrics on the filtered, merged, dataset. These QC metrics include features relevant to cell and sequencing quality. Metrics are split by HIVE number (HIVE###). Each HIVE includes samples from two randomly-selected PIDs for both day 0 (D0) and day 37 (D37) post-vaccination. Each experimental processing batch consists of four sequentially numbered HIVEs.

```{r}
# Visualize the filtered QC metrics
plot1 <- VlnPlot(obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mito"), ncol = 1, pt.size = 0)

vln_plots <- paste0("QCplots_vln_FilterMerge.pdf")
pdf(paste0(dir_save, vln_plots), height = 30, width = 15)
print(plot1)
invisible(dev.off())

plot2 <- ggplot(obj@meta.data, aes(x = nCount_RNA)) +
         geom_histogram(bins = 100) +
         theme(axis.text.x = element_text(angle = 45, hjust = 1))

plot3 <- ggplotGrob(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "percent.mito") +
                    theme(axis.text.x = element_text(angle = 45, hjust = 1)))

plot4 <- ggplotGrob(FeatureScatter(obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") +
                    theme(axis.text.x = element_text(angle = 45, hjust = 1)))

qc_plots <- paste0("QCplots_FilterMerge.pdf")
pdf(paste0(dir_save, qc_plots), height = 5, width = 15)
grid.arrange(plot2, plot3, plot4,
             ncol = 3)
invisible(dev.off())

grid.arrange(plot2, ncol = 1)
grid.arrange(plot3, ncol = 1)
grid.arrange(plot4, ncol = 1)

# Plot additional unfiltered QC metrics to assess sequencing depth
# Plot total reads vs nCount_RNA 
plot5 <- ggplot(obj@meta.data, aes(x = reads.Total, y = nCount_RNA)) +
  geom_point(aes(color = SampleName)) +
  theme_minimal() +
  theme(legend.position = "none", panel.grid.minor = element_blank()) +
  labs(title = "Total Reads vs. nCount_RNA",
       x = "Total reads",
       y = "nCount")
totalvcount_plot <- paste0("QCplots_TotalReadsVsCounts_unfiltered.pdf")
pdf(paste0(dir_save, totalvcount_plot), height = 5, width = 5)
print(plot5)
invisible(dev.off())

# Plot exon reads vs nCount_RNA
plot6 <- ggplot(obj@meta.data, aes(x = ExonReads, y = nCount_RNA)) +
  geom_point(aes(color = SampleName)) +
  theme_minimal() +
  theme(legend.position = "none", panel.grid.minor = element_blank()) +
  labs(title = "Exon Reads vs. nCount_RNA",
       x = "Exon reads",
       y = "nCount")
exonvcount_plot <- paste0("QCplots_ExonReadsVsCounts_unfiltered.pdf")
pdf(paste0(dir_save, exonvcount_plot), height = 5, width = 5)
print(plot6)
invisible(dev.off())

# Plot exon complexity (ExonReads/nCount_RNA)
plot7 <- ggplot(obj@meta.data, aes(x = PID, y = Complexity, fill = PID)) +
  geom_violin(trim = F) +
  stat_summary(fun=median, geom="crossbar", width=0.5, 
               color="black", linetype="solid") +
  theme_minimal() +
  theme(legend.position = "none", 
          panel.grid.minor = element_blank(),
          axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Exon Complexity",
       x = "",
       y = "Exon reads / nCount") +
  scale_y_continuous(limits = c(0, 5), breaks = seq(0, 5, by = 0.5))
exoncomplexity_plot <- paste0("QCplots_ExonComplexity_unfiltered.pdf")
pdf(paste0(dir_save, exoncomplexity_plot), height = 5, width = 5)
print(plot7)
invisible(dev.off())

# Plot total complexity (reads.Total/nCount_RNA)
plot8 <- ggplot(obj@meta.data, aes(x = PID, y = TotalComplexity, fill = PID)) +
  geom_violin(trim = F) +
  stat_summary(fun=median, geom="crossbar", width=0.5, 
               color="black", linetype="solid") +
  theme_minimal() +
  theme(legend.position = "none", 
          panel.grid.minor = element_blank(),
          axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Total Complexity",
       x = "",
       y = "Total reads / nCount") +
  scale_y_continuous(limits = c(0, 250))
totalcomplexity_plot <- paste0("QCplots_TotalComplexity_unfiltered.pdf")
pdf(paste0(dir_save, totalcomplexity_plot), height = 5, width = 5)
print(plot8)
invisible(dev.off())

# Plot sequencing saturation
plot9 <- ggplot(obj@meta.data, aes(x = reads.Total, y = SeqSat)) +
  geom_point(aes(color = orig.ident)) +
  geom_smooth(se=FALSE) +
  theme_minimal() +
  theme(legend.position = "none", panel.grid.minor = element_blank()) +
  labs(title = "Sequencing Saturation",
       x = "Total Reads",
       y = "Sequencing Saturation")
seqsat_plot <- paste0("QCplots_SeqSaturation_unfiltered.pdf")
pdf(paste0(dir_save, seqsat_plot), height = 5, width = 5)
print(plot9)
invisible(dev.off())

plot10 <- ggplot(obj@meta.data, aes(x = PID, y = SeqSat, fill = PID)) +
  geom_violin(trim = F) +
  stat_summary(fun=median, geom="crossbar", width=0.5, 
               color="black", linetype="solid") +
  theme_minimal() +
  theme(legend.position = "none", 
          panel.grid.minor = element_blank(),
          axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Sequencing Saturation",
       x = "",
       y = "Sequencing Saturation") +
  scale_y_continuous(limits = c(0, 1), breaks = seq(0, 1, by = 0.1))
seqsatvln_plot <- paste0("QCplots_SeqSaturationVln_unfiltered.pdf")
pdf(paste0(dir_save, seqsatvln_plot), height = 5, width = 5)
print(plot10)
invisible(dev.off())

# Plot sequencing depth
plot11 <- ggplot(obj@meta.data, aes(x = PID, y = SeqDepth, fill = PID)) +
  geom_boxplot(outlier.shape = NA) +
  geom_point(position=position_jitter(width=0.05), size=0.5) +
  theme_minimal() +
  theme(legend.position = "none", 
          panel.grid.minor = element_blank(),
          axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Expression Level per Gene",
       x = "",
       y = "nCount / nFeature") +
  facet_grid(scales = "free_y")
seqdepthbox_plot <- paste0("QCplots_SeqDepthBox_unfiltered.pdf")
pdf(paste0(dir_save, seqdepthbox_plot), height = 5, width = 5)
print(plot11)
invisible(dev.off())

plot12 <- ggplot(obj@meta.data, aes(x = PID, y = SeqDepth, fill = PID)) +
  geom_violin(trim = F) +
  stat_summary(fun=median, geom="crossbar", width=0.5, 
               color="black", linetype="solid") +
  theme_minimal() +
  theme(legend.position = "none", 
          panel.grid.minor = element_blank(),
          axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(title = "Expression Level per Gene",
       x = "",
       y = "nCount / nFeature") +
  facet_grid(scales = "free_y")
seqdepthvln_plot <- paste0("QCplots_SeqDepthVln_unfiltered.pdf")
pdf(paste0(dir_save, seqdepthvln_plot), height = 5, width = 5)
print(plot12)
invisible(dev.off())

qc_plots_additional <- paste0("QCplots_unfiltered_additional.pdf")
pdf(paste0(dir_save, qc_plots_additional), height = 10, width = 20)
grid.arrange(plot5, plot6, plot7, plot8, plot9, plot10, plot11, plot12, ncol = 4)
invisible(dev.off())

# Plot reads per cell for each sample
reads_per_cell <- paste0("QCplots_ReadsPerCell_FilterMerge.pdf")
pdf(paste0(dir_save, reads_per_cell), height = 15, width = 15)
plot13 <- ggplot(obj@meta.data, aes(x = nCount_RNA, fill = PID)) +
  geom_histogram(bins = 30, alpha = 0.6) +
  scale_x_log10() +
  theme_minimal() +
  labs(title = "Reads Per Cell for Each PID",
       x = "Reads per Cell (log scale)",
       y = "Frequency",
       fill = "PID") +
  facet_wrap(~HIVE, scales = "free_y")
print(plot13)
invisible(dev.off())

# Plot reads per cell as smooth density line
plot14 <- 
  obj[[]] %>% 
  ggplot(aes(x = nCount_RNA + 1)) + 
  geom_density(color = "gray80", linetype = 2, linewidth = 1.5) + 
  geom_density(aes(color = PID)) +
  scale_x_log10() +
  theme_bw()

density_plot <- paste0("QCplots_density_FilterMerge.pdf")
pdf(paste0(dir_save, density_plot), height = 5, width = 15)
plot14
dev.off()
invisible(dev.off())
```

::: panel-tabset
## Violin Plots

```{r, echo = FALSE}
#| fig-height: 19.5

print(plot1)
```

## Feature Plots

```{r, echo = FALSE}
#| fig-height: 19.5

grid.arrange(plot2, plot3, plot4,
             ncol = 1)
```

## Reads vs. nCount_RNA

```{r, echo = FALSE}
print(plot5)
print(plot6)
```

## Complexity

```{r, echo = FALSE, warning = FALSE}
print(plot7)
print(plot8)
```

## Sequencing Saturation

```{r, echo = FALSE, message = FALSE, warning = FALSE}
print(plot9)
print(plot10)
```

## Sequencing Depth

```{r, echo = FALSE}
print(plot11)
print(plot12)
```

## Reads per cell

```{r, echo = FALSE}
print(plot13)
print(plot14)
```
:::

# Save filtered Seurat object as new .Rdata file

The final filtered and merged Seurat object produced by this workflow will be saved as new .Rdata and .rds files which will be used as inputs for downstream workflows.

```{r}
save(obj, file = paste0(dir_save, "Seurat_FilterMerge_obj.Rdata"))
saveRDS(obj, file = paste0(dir_save, "Seurat_FilterMerge_obj.rds"))
```

### Document software

```{r}
sessionInfo()
```
