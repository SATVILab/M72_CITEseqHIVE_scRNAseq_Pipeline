---
title: "CITEseq-HIVE Seurat Cluster and ID cell types"
format: html
editor: visual
---

### Clear console

```{r, output=FALSE}
ls()
rm(list=ls())
```

### Set output directory

```{r}
dir_save <- "output/"
```

### Load libraries

```{r, message=FALSE}
# CHECK THIS CONTAINS ONLY NECESSARY LIBRARIES
library(SingleCellExperiment)
library(Seurat)
library(SeuratObject)
library(dplyr)
library(clustree)
library(ggpubr)
library(patchwork)
library(magrittr)
library(HGNChelper)
library(openxlsx)
library(multtest)
library(metap)
library(ggplot2)
library(cowplot)
library(readxl)
```

### Load the filtered .Rdata file generated by CITEseqHIVE_Seurat_FilterMergeQC.qmd

```{r}
load("output/FilterMerge_Seurat_obj.Rdata")
obj
```

### Show QC metrics for the first 5 cells and create a metadata object

```{r}
head(obj@meta.data, 5)

metadata <- obj@meta.data
```

### Normalize the data

```{r}
# Consider changing to SCTransform 
obj <- NormalizeData(obj, normalization.method = "LogNormalize", scale.factor = 10000)
```

### Identify variable features

```{r}
# Calculate the top 2000 highly variable features
obj <- FindVariableFeatures(obj, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(obj), 10)

# plot variable features and label top 10 variable features
plot1 <- VariableFeaturePlot(obj)
plot2 <-LabelPoints(plot = plot1, points = top10, repel = TRUE)
plot2
```

### Scale the data

```{r}
# Use defaults to scale only variable features. 
obj <- ScaleData(obj)
```

### Perform linear dimensional reduction

```{r}
# Perform PCA for linear dimensional reduction on scaled data
obj <- RunPCA(obj, features = VariableFeatures(object = obj))

# Examine and visualize PCA results a few different ways
print(obj[["pca"]], dims = 1:5, nfeatures = 5)

VizDimLoadings(obj, dims = 1:2, reduction = "pca")

DimPlot(obj, reduction = "pca") + NoLegend()

DimHeatmap(obj, dims = 1, cells = 500, balanced = TRUE)

DimHeatmap(obj, dims = 1:15, cells = 500, balanced = TRUE)
```

Determine the dimensionality of the dataset using an Elbow plot (more efficient alternative to JackStraw procedure).

```{r}
ElbowPlot(obj)
```

### Cluster cells

Start with standard Seurat clustering method WITHOUT INTEGRATION (using ElbowPlot output to determine dims).

```{r, message=FALSE}
obj <- FindNeighbors(obj, dims = 1:12, reduction = "pca")
obj <- FindClusters(obj, resolution = 1.2, cluster.name = "unintegrated_clusters")
obj <- RunUMAP(obj, dims = 1:12, reduction = "pca", reduction.name = "umap.unintegrated")
DimPlot(obj, reduction = "umap.unintegrated", group.by = c("group", "seurat_clusters"))
DimPlot(obj, reduction = "umap.unintegrated", group.by = c("STIM", "seurat_clusters"))
DimPlot(obj, reduction = "umap.unintegrated", group.by = c("PID", "seurat_clusters"))
# Add D0 vs D37
```

### Determine more accurate cluster resolution using clustree

```{r, message=FALSE}
resolution.range <- seq(from =0.2, to = 2, by = 0.2)
obj <- Seurat::FindClusters(object = obj, resolution = resolution.range)

clustree <- clustree(obj, prefix = "RNA_snn_res.")

pdf(paste0(dir_save, "clustree.all.pdf"))
clustree
dev.off()

umap.0.4 <- DimPlot(obj, reduction = 'umap.unintegrated', label = T, group.by = "RNA_snn_res.0.4")
umap.0.6 <- DimPlot(obj, reduction = 'umap.unintegrated', label = T, group.by = "RNA_snn_res.0.6")
umap.0.8 <- DimPlot(obj, reduction = 'umap.unintegrated', label = T, group.by = "RNA_snn_res.0.8")
umap.1 <- DimPlot(obj, reduction = 'umap.unintegrated', label = T, group.by = "RNA_snn_res.1")
umap.1.2 <- DimPlot(obj, reduction = 'umap.unintegrated', label = T, group.by = "RNA_snn_res.1.2")

snn_all <- umap.0.4 + umap.0.6 + umap.0.8 + umap.1 + umap.1.2

pdf(paste0(dir_save, "umap_snn_compare.pdf"), width = 20, height = 20)
snn_all
dev.off()

snn_all

Idents(object = obj) <- "RNA_snn_res.0.6"
```

### Visualize clusters

```{r, message=FALSE}
# Plot UMAPs
pdf(paste0(dir_save, "umap_res.0.6.pdf"))
DimPlot(obj,
        reduction = "umap.unintegrated",
        label = TRUE,
        label.size = 6)
dev.off()

pdf(paste0(dir_save, "umap_allHIVES_res.0.6.pdf"), height = 6, width = 25)
DimPlot(obj,
        reduction = "umap.unintegrated",
        label = TRUE,
        label.size = 4,
        group.by = "group",
        split.by = "HIVE",
        repel = T)
dev.off()

pdf(paste0(dir_save, "umap_allPID_res.0.6.pdf"), height = 6, width = 25)
DimPlot(obj,
        reduction = "umap.unintegrated",
        label = TRUE,
        label.size = 4,
        group.by = "group",
        split.by = "PID",
        repel = T)
dev.off()

pdf(paste0(dir_save, "umap_allGroup_res.0.6.pdf"), height = 6, width = 20)
DimPlot(obj,
        reduction = "umap.unintegrated",
        label = TRUE,
        label.size = 4,
        group.by = "group",
        split.by = "STIM",
        repel = T,
        pt.size = 1,
        alpha = 0.8,
        raster = F)
dev.off()
```

### Determine marker expression by cluster

Find markers for every cell cluster compared to all remaining cells, report only the positive ones.

```{r, message=FALSE}
obj.markers <- FindAllMarkers(obj, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)

obj.markers %>%
  group_by(cluster) %>%
  dplyr::filter(avg_log2FC > 1)

write.csv(obj.markers, file = file.path(dir_save, "all_markers_snn0.6.csv"), quote = FALSE)
```

### Identify markers differentially expressed between specific clusters of interest and plot differentially expressed features as relative expression and as counts.

```{r, message=FALSE}
### MAKE THIS A LOOP TO ITERATE OVER ALL CLUSTERS AUTOMATICALLY 

# Create a list of all cluster identities in obj
cluster.ids <- levels(Idents(obj))

# Initialize a list to store cluster markers
cluster.markers <- list()

# Loop through each Seurat cluster in obj

for (cluster.id in cluster.ids) {
  
  # Find markers for the current cluster
  cluster.markers <- FindMarkers(obj, ident.1 = cluster.id)
  
  # Assign a dynamic object name based on the cluster ID
  object.name <- paste0("cluster.markers.", cluster.id)
  
  # Export cluster markers to a CSV file
  csv_file <- paste0(object.name, ".csv")
  write.csv(cluster.markers, file = file.path(dir_save, paste0(csv_file)), row.names = TRUE)
  
  # Plot expression of top 10 differentially expressed genes for the current cluster
   vln_plot <- VlnPlot(obj,
          features = rownames(cluster.markers)[1:10],
          ncol = 2,
          pt.size = 0)
  vln_plot_relexp <- paste0("DEG_VlnPlotRelExp_Top10_", object.name, ".pdf")
  pdf(paste0(dir_save, vln_plot_relexp), height = 12, width = 6)
  print(vln_plot)
  dev.off()
  
  vln_plot <- VlnPlot(obj,
          features = rownames(cluster.markers)[1:10],
          slot = "counts", 
          log = TRUE, 
          ncol = 2,
          pt.size = 0)
  vln_plot_counts <- paste0("DEG_VlnPlotCounts_Top10_", object.name, ".pdf")
  pdf(paste0(dir_save, vln_plot_counts), height = 12, width = 6)
  print(vln_plot)
  dev.off()
  
  feature_plot <- FeaturePlot(obj,
            features = rownames(cluster.markers)[1:10], 
            label = TRUE,
            label.size = 4,
            split.by = "group",
            pt.size = 0)
  feature_plots <- paste0("DEG_FeaturePlot_Top10_", object.name, ".pdf")
  pdf(paste0(dir_save, feature_plots), height = 24, width = 6)
  print(feature_plot)
  dev.off()
  
}

# Plot a heatmap to look at the top 10 differentially expressed genes across all clusters
pdf(paste0(dir_save, "DEG_Heatmap_AllClusters_Top10.pdf"), height = 30, width = 20)
obj.markers %>%
  group_by(cluster) %>%
  top_n(n = 10, wt = avg_log2FC) -> top10
DoHeatmap(obj, features = top10$gene) + NoLegend()
dev.off()

# Find all markers distinguishing an interesting cluster from main PBMC clusters
cluster4vPBMC.markers <- FindMarkers(obj, ident.1 = 4, ident.2 = c(0:3, 5:7))
head(cluster4vPBMC.markers, n = 10)
```

Save .rds to be used for downstream analyses

```{r}
saveRDS(obj, file = file.path(dir_save, "/obj_final.rds"))
```

### Assign cell types

Predict cell types based on expression using sc-Type

```{r}
# Load gene set preparation function 
source("https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/gene_sets_prepare.R")

# Load cell type annotation function
source("https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/R/sctype_score_.R")
```

Prepare gene sets from input cell marker file. This uses the default of in-built cell marker DB.

```{r}
# DB file
#db_ <- "https://raw.githubusercontent.com/IanevskiAleksandr/sc-type/master/ScTypeDB_full.xlsx";

db_ <- "ScTypeDB_full_MLedit.xlsx"
tissue <- "Immune system" # e.g. Immune system, Pancreas, Liver, Eye, Kidney, Brain, Lung, Adrenal, Heart, Intestine, Muscle, Placenta, Spleen, Stomach, Thymus 

# prepare gene sets
gs_list <- gene_sets_prepare(db_, tissue)
```

Run sc-Type.

```{r}
# check Seurat object version (scRNA-seq matrix extracted differently in Seurat v4/v5)
seurat_package_v5 <- isFALSE('counts' %in% names(attributes(obj[["RNA"]])));
print(sprintf("Seurat object %s is used", ifelse(seurat_package_v5, "v5", "v4")))

# extract scaled scRNA-seq matrix
scRNAseqData_scaled <- if (seurat_package_v5) as.matrix(obj[["RNA"]]$scale.data) else as.matrix(obj[["RNA"]]@scale.data)

# run ScType
es.max <- sctype_score(scRNAseqData = scRNAseqData_scaled, scaled = TRUE, gs = gs_list$gs_positive, gs2 = gs_list$gs_negative)

# merge by cluster
cL_resutls <- do.call("rbind", lapply(unique(obj@meta.data$seurat_clusters), function(cl){
  es.max.cl = sort(rowSums(es.max[ ,rownames(obj@meta.data[obj@meta.data$seurat_clusters==cl, ])]), decreasing = !0)
  head(data.frame(cluster = cl, type = names(es.max.cl), scores = es.max.cl, ncells = sum(obj@meta.data$seurat_clusters==cl)), 10)
}))
sctype_scores <- cL_resutls %>% group_by(cluster) %>% top_n(n = 1, wt = scores)  

# set low-confident (low ScType score) clusters to "unknown"
sctype_scores$type[as.numeric(as.character(sctype_scores$scores)) < sctype_scores$ncells/4] <- "Unknown"
print(sctype_scores[,1:3])
```

Overlay cell type IDs on UMAP.

```{r}
obj@meta.data$sctype_classification = ""
for(j in unique(sctype_scores$cluster)){
  cl_type = sctype_scores[sctype_scores$cluster==j,]; 
  obj@meta.data$sctype_classification[obj@meta.data$seurat_clusters == j] = as.character(cl_type$type[1])
}

pdf(paste0(dir_save, "umap_annotated.pdf"), height = 7, width = 10)
DimPlot(obj, reduction = "umap.unintegrated", label = TRUE, repel = TRUE, group.by = 'sctype_classification')
dev.off()

pdf(paste0(dir_save, "umap_annotated_splitgroup.pdf"), height = 7, width = 15)
DimPlot(obj, reduction = "umap.unintegrated", split.by = "group", group.by = 'sctype_classification')
dev.off()
```

### Document software

```{r}
sessionInfo()
```
